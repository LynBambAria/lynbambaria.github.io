<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux八股文</title>
    <link href="/2025/10/29/%E9%9D%A2%E7%BB%8F/Linux%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <url>/2025/10/29/%E9%9D%A2%E7%BB%8F/Linux%E5%85%AB%E8%82%A1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p><strong>1.列举一些linux中常用的shell指令</strong></p><ul><li>常用文件shell命令</li></ul><blockquote><p><strong>改变目录：cd</strong><br>进入到/tmp目录下<br><code>$ cd /tmp/</code><br><br>回退一个路径<br><code>$ cd …</code><br><br>回退到自己的 home 目录<br><code>$ cd ~</code><br><br>~ 表示：home目录，# 表示：超级管理员</p></blockquote><blockquote><p><strong>查看当前路径:pwd</strong><br>用pwd命令来查看当前的路径<br><code>$ cd work </code><br><code>$ pwd</code><br>/home/work</p></blockquote><blockquote><p><strong>创建目录:mkdir</strong><br>在 /tmp下创建一个test的文件夹<br><code>$ mkdir /tmp/test</code><br><br>若tmp文件夹不存在，上述命令就会出错，需要加上 -p属性,-p 确保目录名称存在，不存在的就建一个<br><code>$ mkdir -p tmp2/test</code><br><br>创建多个文件夹<br><code>$ mkdir a b c</code></p></blockquote><blockquote><p><strong>创建文件：touch</strong><br>touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。ls -l 可以显示档案的时间记录。<br>若test文件不存在，touch将创建一个新的空白文件<br><code>-rw-r–r-- 1 hdd hdd 55 2025-09-21 19:02 test</code><br><code>$ touch test</code><br><code>$ ls -l test</code><br><code>-rw-r–r-- 1 hdd hdd 55 2025-09-21 19:09 test</code></p></blockquote><blockquote><p><strong>删除文件或文件夹：rm</strong><br>删除文件前逐一询问确认<br><code>$ rm test.txt</code><br>rm：是否删除 一般文件 “test.txt”? y<br><br>直接删除，无需逐一确认<br><code>$ rm -f test.txt</code><br><br>将目录及以下之档案亦逐一删除<br><code>$ rm -r work</code><br><code>rm：是否删除 目录 “homework”? y</code><br><br>将该目录和目录下的文件都删除，不需要确认<br><code>$ rm -rf work</code><br><br>一般删除文件用 -rf</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>技术支持面试</title>
    <link href="/2025/07/25/%E9%9D%A2%E7%BB%8F/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2025/07/25/%E9%9D%A2%E7%BB%8F/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>无锡信捷电气股份有限公司——技术支持工程师JD:<br>1.负责公司产品售前、售后的技术支持工作；<br>2.负责为用户撰写售前、售后系统方案，并与用户做技术交流；<br>3.负责对合作伙伴和最终用户进行产品/业务的培训；<br>4.负责对产品资料进行整编、归纳。</p><p>任职资格<br>1.自动化、电气工程、机器人工程等相关专业，本科学历；<br>2.有较强的实际动手能力和灵活的思维，善于解决现场实际问题；<br>3.踏实认真，积极上进，善于与人沟通。</p><p>信捷电气面经✌<br>一、 自我介绍</p><p>主要问了成绩情况（很看重数学）、目前offer情况和意向城市、对公司了解程度、家庭情况、性格底色、有什么缺点、 反问薪资大概开到多少，面试流程</p><!-- 二、八股提问：1.放大电路的性能和指标2.三极管组成的放大器中偏置条件是什么3.有源滤波器和无源滤波器的区别，优缺点4.同步电路和异步电路的区别5.什么是线与逻辑，要实现对硬件有什么要求 --><p>三、项目经历：</p><p>1.简述项目经历，项目的难点有哪些，是怎么处理的，现在的进展怎么样，项目预计什么时候可以完成，接手项目从几个维度去考虑，会考虑成本吗，项目成本大概在多少   </p><p>无锡信捷电气 嵌入式</p><p>面试问题：<br>        1.选一个项目介绍。</p><p>如何把读数变的精准，将误差控制在0.01V</p><pre><code class="hljs">    这个项目是我独立完成的，在这个项目里面最大的挑战就是什么.讲数据的时候一定要提供量化数据，我是怎么克服的，对我的成长是什么。    我对这个事情的思考是什么    如果有机会再做一次这个项目，我会在哪些细节上做的更好，会有哪些创造性的解决思路    2.硬件选择、    3.两个月？项目计划。    4.提前完成？项目难度低？还是？    5.项目评估流程，标准。    6.对这个结果是否满意。    7.别人的作品和自己相比怎么样？自己的项目有什么改进优化的地方？            10.花了多少时间投入这个嵌入式，看过什么书籍。    11.你会怎么学习一个新东西？    12.博客。    13.重复性的工作？难/需要花费很多时间的工作？</code></pre><p>  自我介绍完了后，逮着简历上的东西问，问的不是很多。<br>  还问了进程、线程间通信方式，之间的优缺点是什么。还有些简单的八股。<br>  最后问了问linux驱动开发方面的问题，驱动开发我只学了一个多月，还有好多不懂的。面试完感觉挂了 </p><p>其他面经：<br>自我介绍<br>你对公司的了解<br>深挖实习经历<br>简述实习中、项目中的各种遇到的通信问题，怎么解决的，有没有更好的优化方案，并对他们基本原理进行介绍（IIc、SPI、uart）<br>是否使用过一些仪器设备？相关经历<br>如何看待加班？<br>如何和同事（同组、跨组）沟通？<br>实习中遇到什么情况下，压力比较大，怎么解决的？<br>反问：<br>1.团队培养方案<br>2.新人的成长路线</p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>STM32学习</title>
    <link href="/2025/03/05/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/STM32%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/05/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/STM32%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>本次学习的视频是江协科技的<a href="https://www.bilibili.com/video/BV1th411z7sn/?spm_id_from=333.1387.0.0&vd_source=1e7a1d78191a0fa98e1dcb37d701d4f6">STM32入门教程-2023版 细致讲解 中文字幕</a><br>本次的博客的代码全在STM32cubeIDE的环境下运行,采用STM32 STLink Uninty烧录</p><span id="more"></span><p>所需器件：<br><img src="https://s21.ax1x.com/2025/03/05/pEJLdO0.png" alt="器件总览"><br><img src="https://s21.ax1x.com/2025/03/05/pEJL2lR.png" alt="器件细节①"><br><img src="https://s21.ax1x.com/2025/03/05/pEJLR61.png" alt="器件细节②"></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><ul><li>STM32是ST公司基于ARM Cortex-M内核开发的32位微控制器</li><li>STM32常应用在嵌入式领域，如智能车、无人机、机器人、无线通信、物联网、工业控制、娱乐电子产品等</li><li>STM32功能强大、性能优异、片上资源丰富、功耗低，是一款经典的嵌入式微控制器</li></ul><h2 id="1-1-STM32是什么"><a href="#1-1-STM32是什么" class="headerlink" title="1.1 STM32是什么"></a>1.1 STM32是什么</h2><p>STM32是一系列由ST Microelectronics（意法半导体公司）推出的微控制器(MCU)。这些微控制器基于ARM Cortex-M架构，并且提供各种不同的封装和引脚配置。STM32系列中一些受欢迎的微控制器包括STM32F103，STM32F407和STM32F429。 STM32微控制器以其低功耗，高性能和广泛的功能而闻名。它们通常用于物联网设备，可穿戴技术和其他需要低功耗和高性能的应用。 总体而言，STM32微控制器是许多开发人员的首选，因为它们的多功能性，可靠性和广泛的功能。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">ST</span>：指意法半导体<br>M：指定微处理器<br><span class="hljs-number">32</span>：表示计算机处理器位数<br></code></pre></td></tr></table></figure><h2 id="1-2-STM32应用领域"><a href="#1-2-STM32应用领域" class="headerlink" title="1.2 STM32应用领域"></a>1.2 STM32应用领域</h2><ol><li>嵌入式领域：如智能车、无人机、机器人、无线通信、物联网、工业控制、娱乐电子产品、医疗设备、智能家居等。</li><li>高速数据采集系统：使用STM32连接高速ADC和FPGA芯片，实现对高速信号的采集和处理，例如高速摄像头、高速激光测距仪等。</li><li>自动驾驶控制系统：使用STM32连接多个传感器和执行器，例如摄像头、雷达、电机、电子罗盘等，并通过算法设计和优化，实现自动驾驶控制功能。</li><li>机器人视觉系统：使用STM32连接多个摄像头和处理模块，例如OpenCV、CUDA等，并通过算法设计和优化，实现机器人的视觉导航、物体识别等功能。</li><li>网络安全嵌入式设备：使用STM32连接加密模块和网络模块，实现网络安全通信和数据加密等功能，例如VPN、防火墙、数据加密存储等。</li><li>人工智能嵌入式设备：使用STM32连接AI模块，例如人脸识别、语音识别、自然语言处理等，并通过编程和训练，实现智能化的应用，例如智能门禁、智能家居等。<br>……</li></ol><h2 id="1-3-STM32命名规则"><a href="#1-3-STM32命名规则" class="headerlink" title="1.3 STM32命名规则"></a>1.3 STM32命名规则</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJOptg.png"></p><h2 id="1-4-类型选择"><a href="#1-4-类型选择" class="headerlink" title="1.4 类型选择"></a>1.4 类型选择</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJOPpj.jpg"></p><h2 id="1-5-ARM是什么"><a href="#1-5-ARM是什么" class="headerlink" title="1.5 ARM是什么"></a>1.5 ARM是什么</h2><ul><li>ARM既可以认为是一个<strong>公司的名字</strong> ，也可以认为是对<strong>一类处理器的统称</strong> ，还可以认为是<strong>一种技术的名字</strong> 。</li><li>ARM公司是专门从事基于<strong>RISC技术芯片设计开发</strong> 的公司，作为知识产权供应商，<strong>本身不直接从事芯片生产，而是转让设计许可</strong> ，由合作公司生产各具特色的芯片。</li><li><strong>ARM处理器的内核是统一的</strong> ，由ARM公司提供，而<strong>片内部件则是多样的</strong> ，由各大半导体公司设计，这使得<strong>ARM设计嵌入式系统的时候，可以基于同样的核心，使用不同的片内外设</strong> ，从而具有很大的优势。</li></ul><h2 id="1-6-ARM系列"><a href="#1-6-ARM系列" class="headerlink" title="1.6 ARM系列"></a>1.6 ARM系列</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJOEn0.png"><br><img src="https://s21.ax1x.com/2025/03/05/pEJOVBV.jpg"></p><h2 id="1-7-MCU介绍"><a href="#1-7-MCU介绍" class="headerlink" title="1.7 MCU介绍"></a>1.7 MCU介绍</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJOmAU.jpg"><br><strong>STM32F103C8T6</strong></p><ul><li>系列：主流系列STM32F1</li><li>内核：ARM Cortex-M3</li><li>主频：72MHz</li><li>RAM：20K（SRAM）</li><li>ROM：64K（Flash）</li><li>供电：2.0~3.6V（标准3.3V）</li><li>封装：LQFP48</li></ul><h2 id="1-8-STM32F103C8T6最小系统板"><a href="#1-8-STM32F103C8T6最小系统板" class="headerlink" title="1.8 STM32F103C8T6最小系统板"></a>1.8 STM32F103C8T6最小系统板</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJXi5D.png"></p><h2 id="1-9-STM32硬件资源"><a href="#1-9-STM32硬件资源" class="headerlink" title="1.9 STM32硬件资源"></a>1.9 STM32硬件资源</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJXA8H.png"></p><h2 id="1-10-STM32系统架构"><a href="#1-10-STM32系统架构" class="headerlink" title="1.10 STM32系统架构"></a>1.10 STM32系统架构</h2><p>在小容量、中容量和 大容量产品中，主系统由以下部分构成：</p><ul><li>四个驱动单元：<ul><li>Cortex™-M3内核DCode总线(D-bus)，和系统总线(S-bus)</li><li>通用DMA1和通用DMA2</li></ul></li><li>四个被动单元：<ul><li>内部SRAM</li><li>内部闪存存储器</li><li>FSMC</li><li>AHB到APB的桥(AHB2APBx)，它连接所有的APB设备<br>这些都是通过一个多级的AHB总线构架相互连接的，如下图所示：<br><img src="https://s21.ax1x.com/2025/03/05/pEJXVxA.png"></li></ul></li></ul><h2 id="1-11-引脚定义"><a href="#1-11-引脚定义" class="headerlink" title="1.11 引脚定义"></a>1.11 引脚定义</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJXNq0.png"><br>I = 输入，O = 输出，S = 电源， HiZ = 高阻<br>FT：容忍5V<br>可以使用的功能依选定的型号而定。对于具有较少外设模块的型号，始终是包含较小编号的功能模块。例如，某个型号只有1个SPI和2个USART时，它们即是SPI1和USART1及USART2。<br>PC13，PC14和PC15引脚通过电源开关进行供电，而这个电源开关只能够吸收有限的电流(3mA)。因此这三个引脚作为输出引脚时有以下限制：在同一时间只有一个引脚能作为输出，作为输出脚时只能工作在2MHz模式下，最大驱动负载为30pF，并且不能作为电流源(如驱动LED)。<br>这些引脚在备份区域第一次上电时处于主功能状态下，之后即使复位，这些引脚的状态由备份区域寄存器控制（这些寄存器不会被主复位系统所复位）。 关于如何控制这些IO口的具体信息，请参考STM32F10xxx参考手册的电池备份区域和BKP寄存器的相关章节。<br>与LQFP64的封装不同，在TFBGA64封装上没有PC3，但提供了V REF+ 引脚。<br>此类复用功能能够由软件配置到其他引脚上(如果相应的封装型号有此引脚)，详细信息请参考STM32F10xxx参考手册的复用功能I/O章节和调试设置章节。<br>VFQFPN36封装的引脚2和引脚3、LQFP48和LQFP64封装的引脚5和引脚6、和TFBGA64封装的C1和C2，在芯片复位后默认配置为OSC_IN和OSC_OUT功能脚。软件可以重新设置这两个引脚为PD0和PD1功能。但对于LQFP100/BGA100封装，由于PD0和PD1为固有的功能引脚，因此没有必要再由软件进行重映像设置。更多详细信息请参考STM32F10xxx参考手册的复用功能I/O章节和调试设置章节。在输出模式下，PD0和PD1只能配置为50MHz输出模式。</p><h2 id="1-12-STM32启动配置"><a href="#1-12-STM32启动配置" class="headerlink" title="1.12 STM32启动配置"></a>1.12 STM32启动配置</h2><p>在STM32F10xxx里，可以通过BOOT[1:0]引脚选择三种不同启动模式。<br><img src="https://s21.ax1x.com/2025/03/05/pEJXdaT.png"></p><h2 id="1-13-STM32最小系统电路"><a href="#1-13-STM32最小系统电路" class="headerlink" title="1.13 STM32最小系统电路"></a>1.13 STM32最小系统电路</h2><p><img src="https://s21.ax1x.com/2025/03/05/pEJXsz9.png"></p><h1 id="二、软件安装"><a href="#二、软件安装" class="headerlink" title="二、软件安装"></a>二、软件安装</h1><p>因为keil5配置文件较为复杂，所以采用stm32cubeIDE，但是不知道为什么在我的电脑上无法烧录，所以烧录部分采用STLink Unity</p><h1 id="三、新建工程"><a href="#三、新建工程" class="headerlink" title="三、新建工程"></a>三、新建工程</h1><h1 id="四、GPIO输出"><a href="#四、GPIO输出" class="headerlink" title="四、GPIO输出"></a>四、GPIO输出</h1><ul><li>GPIO（General Purpose Input Output）通用输入输出口</li><li>可配置为8种输入输出模式</li><li>引脚电平：0V~3.3V，部分引脚可容忍5V</li><li>输出模式下可控制端口输出高低电平，用以驱动LED、控制蜂鸣器、模拟通信协议输出时序等</li><li>输入模式下可读取端口的高低电平或电压，用于读取按键输入、外接模块电平信号输入、ADC电压采集、模拟通信协议接收数据等</li></ul><p>每个GPI/O端口有两个32位配置寄存器(GPIOx_CRL，GPIOx_CRH)，两个32位数据寄存器(GPIOx_IDR和GPIOx_ODR)，一个32位置位/复位寄存器(GPIOx_BSRR)，一个16位复位寄存器(GPIOx_BRR)和一个32位锁定寄存器(GPIOx_LCKR)。<br>根据数据手册中列出的每个I/O端口的特定硬件特征， GPIO端口的每个位可以由软件分别配置成多种模式。<br><img src="https://s21.ax1x.com/2025/03/05/pEYF941.png"><br><img src="https://s21.ax1x.com/2025/03/05/pEYmcyq.png"></p><p>GPIO模式：<br><img src="https://s21.ax1x.com/2025/03/10/pENGs5n.png"><br><strong>4种输入模式：</strong></p><ul><li>输入浮空</li><li>输入上拉</li><li>输入下拉</li><li>模拟输入</li></ul><p><strong>4种输出模式：</strong></p><ul><li>开漏输出</li><li>开漏复用功能</li><li>推挽式输出</li><li>推挽式复用功能</li></ul><p><strong>3种最大翻转速度:</strong></p><ul><li>最大输出速度为2MHz</li><li>最大输出速度为10MHz</li><li>最大输出速度为50MHz</li></ul><p><strong>输入浮空</strong><br>浮空输入模式下，I/O端口的电平信号直接进入输入数据寄存器。也就是说，I/O的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的。所以在要读取外部信号时通常配置IO口为浮空输入模式。<br><img src="https://s21.ax1x.com/2025/03/10/pENGg2V.png"></p><p><strong>输入上拉</strong><br>上拉输入模式下，I/O端口的电平信号直接进入输入数据寄存器。但是在I/O端口悬空（在无信号输入）的情况下，输入端的电平可以保持在高电平；并且在I/O端口输入为低电平的时候，输入端的电平为低电平。<br><img src="https://s21.ax1x.com/2025/03/10/pENGWKU.png"></p><p><strong>输入下拉</strong><br>下拉输入模式下，IO口工作方式刚好和上拉模式相反。I/O端口的电平信号直接进入输入数据寄存器。但是在I/O端口悬空（在无信号输入）的情况下，输入端的电平可以保持在低电平；并且在I/O端口输入为高电平的时候，输入端为高电平。<br><img src="https://s21.ax1x.com/2025/03/10/pENGo5R.png"></p><p><strong>模拟输入</strong><br>模拟输入模式下，I/O端口的模拟信号（电压信号，而非电平信号）直接模拟输入到片上外设模块，比如ADC模块等等。<br><img src="https://s21.ax1x.com/2025/03/10/pENGb26.png"></p><p><strong>开漏输出</strong><br>开漏输出模式下，通过设置位设置/清除寄存器或者输出数据寄存器的值，控制MOS管的导通。这里要注意N-MOS管，当设置输出的值为高电平的时候，N-MOS管处于关闭状态，此时I/O端口的电平就不会由输出的高低电平决定，而是由I/O端口外部的上拉或者下拉决定；当设置输出的值为低电平的时候，N-MOS管处于开启状态，此时I/O端口的电平就是低电平。同时，I/O端口的电平也可以通过输入电路进行读取；注意，I/O端口的电平不一定是输出的电平。通常使用开漏输出时外部要加一个上拉电阻。<br><img src="https://s21.ax1x.com/2025/03/10/pENJ9PI.png"></p><p><strong>开漏复用功能</strong><br><img src="https://s21.ax1x.com/2025/03/10/pENJkM8.png"><br><strong>推挽式输出</strong><br>推挽输出模式下，通过设置位设置/清除寄存器或者输出数据寄存器的值，控制P-MOS管和N-MOS管的导通来控制IO口输出高电平还是低电平。这里要注意P-MOS管和N-MOS管，当设置输出的值为1的时候，P-MOS管处于开启状态，N-MOS管处于关闭状态，此时I/O端口的电平就由P-MOS管决定为高电平；当设置输出的值为0的时候，P-MOS管处于关闭状态，N-MOS管处于开启状态，此时I/O端口的电平就由N-MOS管决定为低电平。同时，I/O端口的电平也可以通过输入电路进行读取；注意，此时I/O端口的电平一定是输出的电平。<br><img src="https://s21.ax1x.com/2025/03/10/pENtNgx.png"></p><p> <strong>推挽式复用功能</strong><br> 推挽复用输出模式，与推挽输出模式很是类似。只是输出的高低电平的来源，不是让CPU直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的。<br> <img src="https://s21.ax1x.com/2025/03/10/pENt2xP.png"></p><p><strong>LED：</strong></p><ul><li>LED：发光二极管，正向通电点亮，反向通电不亮<br><img src="https://s21.ax1x.com/2025/03/17/pEdKnUI.jpg"></li><li>LED灯中最重要的就是区分正负极，一般长脚为正，短脚为负，但也不一定完全正确</li><li>另一种判断方式为灯珠中比较大块的为负，小的为正，大的方向指向正极</li></ul><h2 id="4-1-LED闪烁"><a href="#4-1-LED闪烁" class="headerlink" title="4.1 LED闪烁"></a>4.1 LED闪烁</h2><p>接线图如下所示：<br><img src="https://s21.ax1x.com/2025/03/17/pEdKNan.jpg"></p><p>程序代码(默认只包括<code>while(1)</code>内部的代码及接口定义,如有外部更改会额外提示)：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>  <span class="hljs-built_in">HAL_GPIO_WritePin</span>(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);<br>  <span class="hljs-built_in">HAL_Delay</span>(<span class="hljs-number">500</span>);<br><span class="hljs-built_in">HAL_GPIO_WritePin</span>(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);<br><span class="hljs-built_in">HAL_Delay</span>(<span class="hljs-number">500</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>GPIO引脚定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">MX_GPIO_Init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span><br>&#123;<br><br>  <span class="hljs-type">GPIO_InitTypeDef</span> <span class="hljs-variable">GPIO_InitStruct</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-number">0</span>&#125;;<br><br>  <span class="hljs-comment">/* GPIO Ports Clock Enable */</span><br>  __HAL_RCC_GPIOC_CLK_ENABLE();<br>  __HAL_RCC_GPIOD_CLK_ENABLE();<br>  __HAL_RCC_GPIOA_CLK_ENABLE();<br><br>  <span class="hljs-comment">/*Configure GPIO pin Output Level */</span><br>  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);<br><br>  <span class="hljs-comment">/*Configure GPIO pin : LED_RED_Pin */</span><br>  GPIO_InitStruct.Pin = LED_RED_Pin;<br>  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;<br>  GPIO_InitStruct.Pull = GPIO_PULLUP;<br>  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;<br>  HAL_GPIO_Init(LED_RED_GPIO_Port, &amp;GPIO_InitStruct);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在写代码的时候在最后漏了个delay，实际现象是LED灯亮度很低而且没有闪烁现象，还得我排查了好久…</p><h2 id="4-2-LED流水灯"><a href="#4-2-LED流水灯" class="headerlink" title="4.2 LED流水灯"></a>4.2 LED流水灯</h2><h2 id="4-3-蜂鸣器"><a href="#4-3-蜂鸣器" class="headerlink" title="4.3 蜂鸣器"></a>4.3 蜂鸣器</h2>]]></content>
    
    
    <categories>
      
      <category>嵌入式学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习</title>
    <link href="/2025/01/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/01/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>本次学习的视频是比特鹏哥的<a href="https://www.bilibili.com/video/BV1Vm4y1r7jY/?spm_id_from=333.337.search-card.all.click&vd_source=1e7a1d78191a0fa98e1dcb37d701d4f6">C语言程序设计从入门到进阶【比特鹏哥c语言2024完整版视频教程】</a><br>本次的博客的代码全在VS2022的环境下运行</p><span id="more"></span><h1 id="一、初识C语言"><a href="#一、初识C语言" class="headerlink" title="一、初识C语言"></a>一、初识C语言</h1><h2 id="1-1-什么是C语言"><a href="#1-1-什么是C语言" class="headerlink" title="1.1 什么是C语言"></a>1.1 什么是C语言</h2><pre><code class="hljs">一种人和计算机交流的语言，与此类似的还有C++/Java/Pyhton等。广泛应用在底层软件开发，是一种高级语言，也是一种编译型语言。C语言的国际标准：ANSI C，C89，C90...主流编译器：Clang，GCC，WIN-TC，MSVC...</code></pre><h2 id="1-2-第一个C语言程序"><a href="#1-2-第一个C语言程序" class="headerlink" title="1.2 第一个C语言程序"></a>1.2 第一个C语言程序</h2><pre><code class="hljs">1.打开VS2.创建项目</code></pre><p><img src="https://s21.ax1x.com/2025/01/07/pE9TnKI.md.png" alt="①创建新项目"></p><p><img src="https://s21.ax1x.com/2025/01/07/pE9Turt.png" alt="②选择空项目"></p><p><img src="https://s21.ax1x.com/2025/01/07/pE9T6z9.png" alt="③新建源文件"></p><p><img src="https://s21.ax1x.com/2025/01/07/pE9TgMR.png" alt="④创建源文件"></p><pre><code class="hljs">3.写代码</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span>                   <span class="hljs-comment">//头文件，包含库函数</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>                          <span class="hljs-comment">//主函数，程序的入口，有且仅有一个</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                       <span class="hljs-comment">//函数结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p>快捷键F5运行代码，F10逐句执行，ctrl+k+c注释，ctrl+k+u取消注释</p><h2 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3. 数据类型"></a>1.3. 数据类型</h2><table><thead><tr><th align="center">char</th><th align="center">字符型</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">short</td><td align="center">短整型</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">整型</td><td align="center">4</td></tr><tr><td align="center">long</td><td align="center">长整型</td><td align="center">4</td></tr><tr><td align="center">long long</td><td align="center">更长的整型</td><td align="center">8</td></tr><tr><td align="center">float</td><td align="center">单精度浮点数   如66.6</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">双精度浮点数   如6.66 * 10</td><td align="center">8</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Q:每种类型大小多少？<br>A:<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">short</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">double</span>));<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span>  (单位分别为字节)<br></code></pre></td></tr></table></figure><p>计算机中的单位：</p><table><thead><tr><th align="center">bit</th><th align="center">比特位</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">字节</td></tr><tr><td align="center">kb</td><td align="center">千字节</td></tr><tr><td align="center">mb</td><td align="center">兆字节</td></tr><tr><td align="center">gb</td><td align="center">千兆字节</td></tr><tr><td align="center">tb</td><td align="center">太字节</td></tr><tr><td align="center">pb</td><td align="center">拍字节</td></tr></tbody></table><ul><li>计算机能理解二级制，即0和1，每一个0或1都为一个比特位</li><li>8 bit = 1 byte , 1024 byte = 1 kb , 1024 kb = 1mb , 1024 mb = 1 gb ,<br>1024 gb = 1 tb , 1024 gb = 1 tb , 1024 tb = 1 pb</li><li>C语言规定sizeof(long)&gt;=sizeof(int)</li></ul><p>数据类型的使用：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;w&#x27;</span>;<br><span class="hljs-type">int</span> weight = <span class="hljs-number">120</span>;<br><span class="hljs-type">double</span> price = <span class="hljs-number">66.6</span>;<br></code></pre></td></tr></table></figure><h2 id="1-4-变量和常量"><a href="#1-4-变量和常量" class="headerlink" title="1.4 变量和常量"></a>1.4 变量和常量</h2><h3 id="1-4-1-变量"><a href="#1-4-1-变量" class="headerlink" title="1.4.1 变量"></a>1.4.1 变量</h3><p>变量分为局部变量和全局变量</p><ul><li>局部变量：{}内定义的变量</li><li>全局变量：{}外定义的变量<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;         <span class="hljs-comment">//全局变量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;     <span class="hljs-comment">//局部变量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; a = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>1.变量不可以在同一个地方重复定义<br>2.当全局变量和局部变量名字相同的情况下，局部优先<br>3.不建议全局变量和局部变量名字相同</p></blockquote><h4 id="1-4-1-1-变量的使用"><a href="#1-4-1-1-变量的使用" class="headerlink" title="1.4.1.1 变量的使用"></a>1.4.1.1 变量的使用</h4><p>写一个代码，计算两个整数的和</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span>&quot;</span>,&amp;num1, &amp;num2);<br>    <span class="hljs-keyword">int</span> sum = num1 + num2;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>&quot;</span>,sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-1-2-变量的作用域"><a href="#1-4-1-2-变量的作用域" class="headerlink" title="1.4.1.2 变量的作用域"></a>1.4.1.2 变量的作用域</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        a = <span class="hljs-number">10</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>,a);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; a = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        a = <span class="hljs-number">10</span>;      <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 编译失败<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    a = <span class="hljs-number">10</span>; <br>    &#123;<br>      <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;a = <span class="hljs-variable">%d</span>\n&quot;</span>,a);       <br>    &#125;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;a = <span class="hljs-variable">%d</span>\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; a = <span class="hljs-number">10</span><br>&gt; a = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li><p>局部变量的作用域是变量所在的局部范围。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs perl">a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> main()<br>&#123; <br>    &#123;<br>      <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;a = <span class="hljs-variable">%d</span>\n&quot;</span>,a);       <br>    &#125;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;a = <span class="hljs-variable">%d</span>\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; a = <span class="hljs-number">10</span><br>&gt; a = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p>全局变量的作用域是整个工程。</p></li></ul><h4 id="1-4-1-3-变量的生命周期"><a href="#1-4-1-3-变量的生命周期" class="headerlink" title="1.4.1.3 变量的生命周期"></a>1.4.1.3 变量的生命周期</h4><ul><li>局部变量：进入作用域生命周期开始，出作用域生命周期结束</li><li>全局变量：整个程序的生命周期</li></ul><h3 id="1-4-2-常量"><a href="#1-4-2-常量" class="headerlink" title="1.4.2 常量"></a>1.4.2 常量</h3><ul><li><p>字面常量</p></li><li><p>const修饰的常变量</p></li><li><p>#define定义的标识符常量</p></li><li><p>枚举常量</p><h4 id="1-4-2-1-字面常量："><a href="#1-4-2-1-字面常量：" class="headerlink" title="1.4.2.1 字面常量："></a>1.4.2.1 字面常量：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-number">30</span>;<br>    <span class="hljs-number">3.14</span>;<br>    <span class="hljs-string">&#x27;w&#x27;</span>;<br>    <span class="hljs-string">&quot;abc&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-2-const常量："><a href="#1-4-2-2-const常量：" class="headerlink" title="1.4.2.2 const常量："></a>1.4.2.2 const常量：</h4><p>被const修饰的变量无法再被修改数值,有常量的属性，但仍是变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br>    a = <span class="hljs-number">20</span>;<br>    printf(<span class="hljs-string">&quot;a = %d\n&quot;</span>,a);<br>&#125;<br><br>&gt; 运行结果：<br>&gt; a = <span class="hljs-number">20</span><br><br>把a的<span class="hljs-built_in">int</span>修改为<span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span></span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br>    a = <span class="hljs-number">20</span>;<br>    printf(<span class="hljs-string">&quot;a = %d\n&quot;</span>,a);<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 编译失败<br></code></pre></td></tr></table></figure><p>证明被const修饰的变量仍是变量：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> n = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">int</span> arr[n] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 编译失败,报错内容为表达式必须含有常量值<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> n = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">int</span> arr[n] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 编译失败,报错内容为表达式必须含有常量值<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-3-define定义的标识符常量"><a href="#1-4-2-3-define定义的标识符常量" class="headerlink" title="1.4.2.3 #define定义的标识符常量:"></a>1.4.2.3 #define定义的标识符常量:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 100</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,MAX);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> a = MAX;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">100</span><br>&gt; <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h4 id="1-4-2-4-枚举常量"><a href="#1-4-2-4-枚举常量" class="headerlink" title="1.4.2.4 枚举常量:"></a>1.4.2.4 枚举常量:</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">enum</span> Color<br>&#123;<br>    <span class="hljs-comment">//枚举常量</span><br>    RED,<br>    GREEN,<br>    BLUE<br>&#125;;<br><br><span class="hljs-built_in">enum</span> Sex<br>&#123;<br>    <span class="hljs-comment">//枚举常量</span><br>    MALE,<br>    FAMALE,<br>    SECRET<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">enum</span> Color c = RED;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-字符串-转义字符-注释"><a href="#1-5-字符串-转义字符-注释" class="headerlink" title="1.5 字符串 + 转义字符 + 注释"></a>1.5 字符串 + 转义字符 + 注释</h2><h3 id="1-5-1-字符串"><a href="#1-5-1-字符串" class="headerlink" title="1.5.1 字符串"></a>1.5.1 字符串</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">char</span> ch = <span class="hljs-string">&#x27;w&#x27;</span>;               <span class="hljs-comment">//字符类型</span><br>    <span class="hljs-string">&quot;abc&quot;</span>;                       <span class="hljs-comment">//C语言没有字符串类型</span><br>    <span class="hljs-built_in">char</span> arr[] = <span class="hljs-string">&quot;abcedef&quot;</span>;      <span class="hljs-comment">//字符串存储方法  </span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/01/08/pECnBGT.png"></p><ul><li>数组arr表面上只有abcdef六个字母，实际上有7个元素，末尾还有一个\0被隐藏了<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;abcedef&quot;</span>;                    <span class="hljs-comment">//7个元素</span><br>    <span class="hljs-type">char</span> arr2[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>&#125;;    <span class="hljs-comment">//6个元素    </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr2);          <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; abcdef<br>&gt; abcdef烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫攼?<br></code></pre></td></tr></table></figure></li><li>arr1 的内存布局: a b c d e f \0</li><li>arr2 的内存布局: a b c d e f </li><li>\0是结束的标志，之所以打印arr2会出现那个情况是因为一直在f的位置往后打印，直到寻找到\0停止</li><li>解决方法为在arr2内补充一个’\0’<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp">证明\<span class="hljs-number">0</span>的存在：<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">//求字符串长度的一个函数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br>       <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">3</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;abcdef&quot;</span>;                    <br>    <span class="hljs-type">char</span> arr2[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> arr3[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;    <br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr1));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr2));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr3));<br>       <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">6</span><br>&gt; <span class="hljs-number">34</span><br>&gt; <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-5-2-转义字符"><a href="#1-5-2-转义字符" class="headerlink" title="1.5.2 转义字符"></a>1.5.2 转义字符</h3><table><thead><tr><th align="center">转义字符</th><th align="center">释义</th></tr></thead><tbody><tr><td align="center">\？</td><td align="center">在书写连续多个问号时使用，防止他们被解析成三字母词</td></tr><tr><td align="center">\‘</td><td align="center">用于表示字符常量’</td></tr><tr><td align="center">\“</td><td align="center">用于表示一个字符串内部的双引号</td></tr><tr><td align="center">\\</td><td align="center">用于表示一个反斜杠，防止它被解释为一个转义序列符</td></tr><tr><td align="center">\a</td><td align="center">警告字符，蜂鸣</td></tr><tr><td align="center">\b</td><td align="center">退格符</td></tr><tr><td align="center">\f</td><td align="center">进纸符</td></tr><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">水平制表符</td></tr><tr><td align="center">\v</td><td align="center">垂直制表符</td></tr><tr><td align="center">\ddd</td><td align="center">ddd表示1-3个八进制的数字，如\130 -&gt;X</td></tr><tr><td align="center">\xdd</td><td align="center">dd表示2个十六进制数字，如 \x30 -&gt;0</td></tr></tbody></table><h4 id="1-5-2-1-？"><a href="#1-5-2-1-？" class="headerlink" title="1.5.2.1 \？"></a>1.5.2.1 \？</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl">\？<br>三字母词<br>？？)--&gt; ]<br>？？(--&gt; [<br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%s</span>\n&quot;</span>,<span class="hljs-string">&quot;(Are you OK??)&quot;</span>;)<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%s</span>\n&quot;</span>,<span class="hljs-string">&quot;(Are you OK\?\?)&quot;</span>;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; (Are you OK]<br>&gt; (Are you OK??)<br></code></pre></td></tr></table></figure><h4 id="1-5-2-2-‘-“"><a href="#1-5-2-2-‘-“" class="headerlink" title="1.5.2.2 \‘    \“"></a>1.5.2.2 \‘    \“</h4><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs scilab">\<span class="hljs-string">&#x27;    \&quot;</span><br><span class="hljs-string">%d  - 打印整型</span><br><span class="hljs-string">%c  - 打印字符</span><br><span class="hljs-string">%s  - 打印字符串</span><br><span class="hljs-string">%f  - 打印float类型的数据</span><br><span class="hljs-string">%lf - 打印double类型的数据</span><br><span class="hljs-string">%zu - 打印sizeof的返回值</span><br><span class="hljs-string"></span><br><span class="hljs-string">int main()</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    printf(&quot;</span>%c\n<span class="hljs-string">&quot;,&#x27;</span>w&#x27;);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; w<br>&gt; abc<br><br>int main()<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;&#x27;&#x27;);</span><br><span class="hljs-string">    printf(&quot;</span><span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 编译失败<br>&gt; 原因：C语言会让单引号<span class="hljs-string">&#x27;(双引号&quot;</span>)成双成对，有一个落单了<br><br>int main()<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>;)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\&quot;&quot;</span>;)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&gt; &quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-5-2-3"><a href="#1-5-2-3" class="headerlink" title="1.5.2.3 \\"></a>1.5.2.3 \\</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">\\<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abcd\0ef&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abcd\\0ef&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; abcd<br>&gt; abcd\<span class="hljs-number">0</span>ef<br></code></pre></td></tr></table></figure><h4 id="1-5-2-4-t"><a href="#1-5-2-4-t" class="headerlink" title="1.5.2.4 \t"></a>1.5.2.4 \t</h4><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs isbl">\<span class="hljs-function"><span class="hljs-title">t</span>(效果相当于<span class="hljs-variable"><span class="hljs-built_in">tab</span></span>键，但是只算一个字符)</span><br><br><span class="hljs-variable">int</span> <span class="hljs-function"><span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-title">printf</span>(<span class="hljs-string">&quot;C:\test\test.c&quot;</span>);</span><br><span class="hljs-function">    <span class="hljs-title">printf</span>(<span class="hljs-string">&quot;C:\\test\\test.c&quot;</span>);</span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-variable">return</span> <span class="hljs-number">0</span>;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&gt; 运行结果：</span><br><span class="hljs-function">&gt; <span class="hljs-variable">C</span>:    <span class="hljs-variable">est</span>     <span class="hljs-variable">est.c</span></span><br><span class="hljs-function">&gt; <span class="hljs-variable">C</span>:\<span class="hljs-variable">test</span>\<span class="hljs-variable">test.c</span></span><br></code></pre></td></tr></table></figure><h4 id="1-5-2-5-ddd-xdd"><a href="#1-5-2-5-ddd-xdd" class="headerlink" title="1.5.2.5 \ddd    \xdd"></a>1.5.2.5 \ddd    \xdd</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl">\ddd    \xdd<br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%c</span>\n&quot;</span>,<span class="hljs-string">&#x27;\130&#x27;</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%c</span>\n&quot;</span>,<span class="hljs-string">&#x27;\x60&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; X<br>&gt; <span class="hljs-string">` </span><br></code></pre></td></tr></table></figure><ul><li>\130 表示的是八进制，转换为十进制为：1 * 8^2 + 3 * 8^1 + 0 * 8^0 = 88,88是X对应的ASCII码</li><li>\x60 表示的是十六进制，转换为十进制为：6 * 16^1 + 0 * 16^0 = 96,96是`对应的ASCII码<br><img src="https://s21.ax1x.com/2025/01/09/pECD8rd.png"></li></ul><blockquote><p>Q1:printf(“%d\n”,strlen(“qwer t”));输出结果为？<br>A1:6,空格也算<br>Q2:printf(“%d\n”,strlen(“c:\test\628\test.c”));输出结果为？<br>A2:14,c : \t e s t \62 8 \t e s t . c<br>\t为转移字符，算一个，\62为十六进制数字，因为有8的存在，\628不符合八进制的标准</p></blockquote><h3 id="1-5-3-注释"><a href="#1-5-3-注释" class="headerlink" title="1.5.3 注释"></a>1.5.3 注释</h3><ul><li>代码中不需要的代码可以直接删除，也可以注释掉</li><li>代码中有的内容比较难懂，注释文字解释说明<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*注释代码的方法1（C语言的注释风格）：</span><br><span class="hljs-comment">    int a =10;</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//注释代码的方法2（C++的注释风格）：</span><br>    <span class="hljs-type">int</span>* p = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//创建指针变量p，并赋值NULL</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-6-选择语句"><a href="#1-6-选择语句" class="headerlink" title="1.6 选择语句"></a>1.6 选择语句</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> input;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;今天下雨了吗？\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入&#x27;Y&#x27;或&#x27;N&#x27;\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;input);<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;今天下雨了\n&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input == <span class="hljs-string">&#x27;N&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;今天没下雨\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入错误\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-循环语句"><a href="#1-7-循环语句" class="headerlink" title="1.7 循环语句"></a>1.7 循环语句</h2><ul><li>while</li><li>for</li><li>do…while<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span>()<br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">day</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">day</span>&lt;<span class="hljs-number">365</span>)<br>    &#123;<br>        <span class="hljs-built_in">day</span>++;<br>        <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;今天是今年的第%d天\n&quot;</span>,<span class="hljs-built_in">day</span>);<br>    &#125;<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;今年过完咯&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-8-函数"><a href="#1-8-函数" class="headerlink" title="1.8 函数"></a>1.8 函数</h2><p>求两个整数的和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> z = <span class="hljs-number">0</span>;<br>    z = x + y;<br>    <br>    <span class="hljs-keyword">return</span> z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> n2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n1, &amp;n2);<br><br>    <span class="hljs-type">int</span> sum = <span class="hljs-built_in">Add</span>(n1, n2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-9-数组"><a href="#1-9-数组" class="headerlink" title="1.9 数组"></a>1.9 数组</h2><p>存储10~19的数字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">11</span>;<br>    ……<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">19</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>太过麻烦，引入数组：<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[<span class="hljs-number">8</span>]);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">10</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">18</span><br>&gt; <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><ul><li>定义数组时，[]内的数字为数组最多存放元素的个数，如未定义数字，会自动匹配定义数组的长度</li><li>C语言规定，数组的每个元素都有一个下标，下标是从0开始的</li><li>数组通过下标访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr1[] = &#123;<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> arr2[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>&#125;;<br>    <span class="hljs-type">char</span> arr3[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>&#125;;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr1));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr2));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr3));<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">67</span><br>&gt; <span class="hljs-number">35</span><br>&gt; <span class="hljs-number">3</span><br>arr1和arr2出现异常是因为没有结束符<span class="hljs-string">&#x27;\0&#x27;</span>,arr3能正确显示是因为数组长度为<span class="hljs-number">4</span>，而定义只有<span class="hljs-number">3</span>，剩下一个默认分配<span class="hljs-string">&#x27;\0&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="1-10-操作符"><a href="#1-10-操作符" class="headerlink" title="1.10 操作符"></a>1.10 操作符</h2><h3 id="1-10-1-算术操作符"><a href="#1-10-1-算术操作符" class="headerlink" title="1.10.1 算术操作符"></a>1.10.1 算术操作符</h3><blockquote><p><code>+  -   *   /   % </code></p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs perl">/(除)   <span class="hljs-variable">%(</span>取模)<br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">7</span> / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,a);<br><br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">7</span> % <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,b);<br><br>    float c = <span class="hljs-number">7</span> / <span class="hljs-number">2.0</span>;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%f</span>\n&quot;</span>,c);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">3</span><br>&gt; <span class="hljs-number">1</span><br>&gt; <span class="hljs-number">3.500000</span><br>除号两端都是整数的时候，执行的是整数除法，如果两端只要有一个浮点数就执行浮点数的除法<br><br><span class="hljs-variable">%.</span>1f表示保留一位小数，<span class="hljs-variable">%.</span>2f表示保留两位小数，以此类推<br></code></pre></td></tr></table></figure><h3 id="1-10-2-移位操作符（涉及二级制的运算，后续详细说明）："><a href="#1-10-2-移位操作符（涉及二级制的运算，后续详细说明）：" class="headerlink" title="1.10.2 移位操作符（涉及二级制的运算，后续详细说明）："></a>1.10.2 移位操作符（涉及二级制的运算，后续详细说明）：</h3><blockquote><p><code>&gt;&gt; &lt;&lt; </code></p></blockquote><h3 id="1-10-3-逻辑操作符（后续详细说明）："><a href="#1-10-3-逻辑操作符（后续详细说明）：" class="headerlink" title="1.10.3 逻辑操作符（后续详细说明）："></a>1.10.3 逻辑操作符（后续详细说明）：</h3><blockquote><p>&amp;     ^       |</p></blockquote><h3 id="1-10-4-赋值操作符："><a href="#1-10-4-赋值操作符：" class="headerlink" title="1.10.4 赋值操作符："></a>1.10.4 赋值操作符：</h3><blockquote><p><code>= += *= /= &amp;= ^= |= &gt;&gt;= &lt;&lt;= %=</code></p></blockquote><h3 id="1-10-5-单目操作符（只有一个操作数的操作符）："><a href="#1-10-5-单目操作符（只有一个操作数的操作符）：" class="headerlink" title="1.10.5 单目操作符（只有一个操作数的操作符）："></a>1.10.5 单目操作符（只有一个操作数的操作符）：</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">!       逻辑反操作</span><br><span class="hljs-deletion">-       负值</span><br><span class="hljs-addition">+       正值</span><br>&amp;       取地址<br>sizeof  操作数的类型<br>~       对一个二进制数的按位取反<br><span class="hljs-deletion">--      前置、后置</span><br><span class="hljs-addition">++      前置、后置</span><br>*       间接访问操作符（解引用操作符）<br>()      强制类型转换<br></code></pre></td></tr></table></figure><ul><li>C语言中规定0为假，非0为真 </li></ul><h4 id="1-10-5-1-sizeof"><a href="#1-10-5-1-sizeof" class="headerlink" title="1.10.5.1 sizeof"></a>1.10.5.1 sizeof</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">sizeof</span>:<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(arr));<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]));<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(arr)/<span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]));<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">40</span>    (计算的是整个数组的大小，单位是字节)<br>&gt; <span class="hljs-number">4</span>     (<span class="hljs-number">0</span>元素的大小)<br>&gt; <span class="hljs-number">10</span>    (数组的元素个数)<br></code></pre></td></tr></table></figure><h4 id="1-10-5-2-–"><a href="#1-10-5-2-–" class="headerlink" title="1.10.5.2 ++ –"></a>1.10.5.2 ++ –</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp">++、--:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = a++;    <span class="hljs-comment">//后置++，先使用，后+1</span><br>                    <span class="hljs-comment">//等效：</span><br>                    <span class="hljs-comment">//b = a;</span><br>                    <span class="hljs-comment">//a = a + 1;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d\n&quot;</span>,a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b=%d\n&quot;</span>,b);<br><br>    <span class="hljs-type">int</span> c = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> d = c--;    <span class="hljs-comment">//后置--,先使用，后-1</span><br>                    <span class="hljs-comment">//等效：</span><br>                    <span class="hljs-comment">//d = c;</span><br>                    <span class="hljs-comment">//d = d - 1;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%d\n&quot;</span>,c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d=%d\n&quot;</span>,d);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; a=<span class="hljs-number">11</span><br>&gt; b=<span class="hljs-number">10</span><br>&gt; c=<span class="hljs-number">9</span><br>&gt; d=<span class="hljs-number">10</span><br><br><span class="hljs-type">int</span> <span class="hljs-built_in">main</span>()<br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = ++a;    <span class="hljs-comment">//前置++，先+1，后使用</span><br>                    <span class="hljs-comment">//等效：</span><br>                    <span class="hljs-comment">//a = a + 1;</span><br>                    <span class="hljs-comment">//b = a;</span><br>                    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d\n&quot;</span>,a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b=%d\n&quot;</span>,b);<br><br>    <span class="hljs-type">int</span> c = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> d = --c;    <span class="hljs-comment">//后置--,先-1，后使用</span><br>                    <span class="hljs-comment">//等效：</span><br>                    <span class="hljs-comment">//d = d - 1;</span><br>                    <span class="hljs-comment">//d = c;                    </span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%d\n&quot;</span>,c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d=%d\n&quot;</span>,d);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; a=<span class="hljs-number">11</span><br>&gt; b=<span class="hljs-number">11</span><br>&gt; c=<span class="hljs-number">9</span><br>&gt; d=<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h4 id="1-10-5-3"><a href="#1-10-5-3" class="headerlink" title="1.10.5.3 ()"></a>1.10.5.3 ()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">()<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = (<span class="hljs-type">int</span>)<span class="hljs-number">3.14</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">3</span><br>将<span class="hljs-type">double</span>类型的<span class="hljs-number">3.14</span>强制转换为<span class="hljs-type">int</span> <br></code></pre></td></tr></table></figure><h3 id="1-10-6-关系操作符"><a href="#1-10-6-关系操作符" class="headerlink" title="1.10.6 关系操作符"></a>1.10.6 关系操作符</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&gt;       大于<br>&gt;=      大于等于<br>&lt;       小于<br>&lt;=      小于等于<br>!=      不等于<br><span class="hljs-section">==      判断是否等于</span><br></code></pre></td></tr></table></figure><h3 id="1-10-7-逻辑操作符"><a href="#1-10-7-逻辑操作符" class="headerlink" title="1.10.7 逻辑操作符"></a>1.10.7 逻辑操作符</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">&amp;&amp;      逻辑与，并且</span><br><span class="hljs-string">||      逻辑或，或者</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">if</span>(a &amp;&amp; b)          <span class="hljs-comment">//必须a和b都为真</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hehe\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">if</span>(a || b)          <span class="hljs-comment">//a和b有一个为真</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hehe\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; hehe<br></code></pre></td></tr></table></figure><h3 id="1-10-8-条件操作符"><a href="#1-10-8-条件操作符" class="headerlink" title="1.10.8 条件操作符"></a>1.10.8 条件操作符</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs perl">exp1?exp2:exp3<br>三目操作符，有三个操作数<br>即：如果exp1成立，则执行exp2，否则执行exp3<br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">100</span>;<br>    <br>    <span class="hljs-keyword">int</span> m = (a &gt; b ? a : b);<br>    <span class="hljs-keyword">int</span> n = (c &gt; b ? c : b);<br><br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,m);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,n);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">20</span><br>&gt; <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="1-10-9-逗号表达式"><a href="#1-10-9-逗号表达式" class="headerlink" title="1.10.9 逗号表达式"></a>1.10.9 逗号表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">逗号表达式是逗号隔开的一串表达式<br>从左向右依次计算，整个表达式的结果是最后一个表达式的结果<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br>           <span class="hljs-comment">//c=8   a=28  5</span><br>    <span class="hljs-type">int</span> d = (c=a<span class="hljs-number">-2</span>,a=b+c,c<span class="hljs-number">-3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,d);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="1-10-10-下标引用、函数调用和结构成员"><a href="#1-10-10-下标引用、函数调用和结构成员" class="headerlink" title="1.10.10 下标引用、函数调用和结构成员"></a>1.10.10 下标引用、函数调用和结构成员</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[]</span>、<span class="hljs-built_in">f</span>(x)、.、-&gt;<br></code></pre></td></tr></table></figure><h2 id="1-11-常见关键字"><a href="#1-11-常见关键字" class="headerlink" title="1.11 常见关键字"></a>1.11 常见关键字</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> <span class="hljs-keyword">break</span> <span class="hljs-keyword">case</span> <span class="hljs-type">char</span> <span class="hljs-type">const</span> <span class="hljs-keyword">continue</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">do</span> <span class="hljs-type">double</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">enum</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">float</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">goto</span> <span class="hljs-keyword">if</span> <span class="hljs-type">int</span> <span class="hljs-type">long</span> <span class="hljs-keyword">register</span> <span class="hljs-keyword">return</span> <span class="hljs-type">short</span> <span class="hljs-type">signed</span><br><span class="hljs-keyword">sizeof</span> <span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> <span class="hljs-keyword">switch</span> <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">union</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">void</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">while</span><br></code></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/01/11/pEPm2WT.png"><br>变量的命名：</p><ol><li>有意义</li><li>必须是字母、数字、下划线组成，不能有特殊字符，同时不能以数字开头<br>int  2b;  //err<br>int _2b; //ok</li><li>变量名称不能为关键字</li></ol><h3 id="1-11-1-关键字typedef"><a href="#1-11-1-关键字typedef" class="headerlink" title="1.11.1 关键字typedef"></a>1.11.1 关键字typedef</h3><p>类型定义，或类型重命名</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">typedef unsigned <span class="hljs-built_in">int</span> <span class="hljs-built_in">uint</span>;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">uint</span> num = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-11-2-关键字static"><a href="#1-11-2-关键字static" class="headerlink" title="1.11.2 关键字static"></a>1.11.2 关键字static</h3><h4 id="1-11-2-1-修饰局部变量"><a href="#1-11-2-1-修饰局部变量" class="headerlink" title="1.11.2.1 修饰局部变量"></a>1.11.2.1 修饰局部变量</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> a = <span class="hljs-number">1</span>;<br>    a++;<br>    printf(<span class="hljs-string">&quot;%d &quot;</span>,a);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>)<br>    &#123;<br>        test();<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br>第一次运行时在test()函数内部，a经历过++并被打印后生命周期结束，a被销毁，再次进入test函数中时a=<span class="hljs-number">1</span>被重新创建<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span><br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> a = <span class="hljs-number">1</span>;<br>    a++;<br>    printf(<span class="hljs-string">&quot;%d &quot;</span>,a);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>)<br>    &#123;<br>        test();<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span><br><span class="hljs-keyword">static</span>修饰局部变量的时候，局部变量出了作用域，不销毁，本质上<span class="hljs-keyword">static</span>修饰局部变量的时候，改变了变量的存储位置<br><span class="hljs-keyword">static</span>影响了变量的生命周期，生命周期变长，和程序的生命周期一样<br></code></pre></td></tr></table></figure><h4 id="1-11-2-2-修饰全局变量"><a href="#1-11-2-2-修饰全局变量" class="headerlink" title="1.11.2.2 修饰全局变量"></a>1.11.2.2 修饰全局变量</h4><p>一个工程下跨两个源文件：<br><img src="https://s21.ax1x.com/2025/01/11/pEP34de.png"><br>采用extern声明后：<br><img src="https://s21.ax1x.com/2025/01/11/pEP3Lsf.png"><br>用static修饰：<br><img src="https://s21.ax1x.com/2025/01/11/pEP8iQ0.png"></p><ul><li>全局变量是具有外部链接属性的</li><li>static修饰全局变量的时候，这个全局变量的外部链接属性就变成了内部链接属性，其他的源文件就不能再使用到全局变量</li></ul><h4 id="1-11-2-3-修饰函数"><a href="#1-11-2-3-修饰函数" class="headerlink" title="1.11.2.3 修饰函数"></a>1.11.2.3 修饰函数</h4><p>分开文件定义函数：<br><img src="https://s21.ax1x.com/2025/01/11/pEP88eO.png"><br>分开用extern声明函数：<br><img src="https://s21.ax1x.com/2025/01/11/pEP8GwD.png"><br>static修饰函数：<br><img src="https://s21.ax1x.com/2025/01/11/pEP8tFH.png"></p><ul><li>函数是具有外部链接属性的</li><li>static修饰函数后，外部链接属性变为内部链接属性</li></ul><h2 id="1-12-define-定义常量和宏"><a href="#1-12-define-定义常量和宏" class="headerlink" title="1.12 #define 定义常量和宏"></a>1.12 #define 定义常量和宏</h2><h3 id="1-12-1-define定义标识符常量"><a href="#1-12-1-define定义标识符常量" class="headerlink" title="1.12.1 #define定义标识符常量"></a>1.12.1 #define定义标识符常量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM 100</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,NUM);<br>    <span class="hljs-type">int</span> n = NUM;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">100</span><br>&gt; <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="1-12-2-define定义宏"><a href="#1-12-2-define定义宏" class="headerlink" title="1.12.2 #define定义宏"></a>1.12.2 #define定义宏</h3><ul><li>宏是有参数的</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD(x,y)((x)+(y))</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-built_in">ADD</span>(a,b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-13-指针"><a href="#1-13-指针" class="headerlink" title="1.13 指针"></a>1.13 指针</h2><h3 id="1-13-1-内存"><a href="#1-13-1-内存" class="headerlink" title="1.13.1 内存"></a>1.13.1 内存</h3><ul><li>内存是电脑上特别重要的存储器，计算机中程序的运行都是在内存中进行的。</li><li>为了有效的使用内存，内存会划分为一个一个内存单元，一个内存单元的大小为<strong>1个字节</strong>，每个内存单元都有一个编号</li><li>存放指针地址的变量就是指针变量<br><img src="https://s21.ax1x.com/2025/01/12/pEPDl6g.png"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;         <span class="hljs-regexp">//</span>向内存申请<span class="hljs-number">4</span>个字节，存储<span class="hljs-number">10</span><br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,&amp;a);<br>    <span class="hljs-keyword">int</span> *p = &amp;a;        <span class="hljs-regexp">//p</span>是指针变量<br>//<span class="hljs-keyword">int</span>说明p指向的对象是<span class="hljs-keyword">int</span>类型的<br>//*说明p是指针变量<br><br>    *p = <span class="hljs-number">20</span>;            <span class="hljs-regexp">//</span>解引用操作符，通过p中存放的地址，找到p所指向的对象，*p就是p指向的对象<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 000000DF82CFFB04<br>&gt; <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-13-2-指针变量的大小"><a href="#1-13-2-指针变量的大小" class="headerlink" title="1.13.2 指针变量的大小"></a>1.13.2 指针变量的大小</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">char</span>*));<br>    printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">short</span>*));<br>    printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">int</span>*));<br>    printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>*));<br>    printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">double</span>*));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <br></code></pre></td></tr></table></figure><ul><li>不管是什么类型的指针，都是在创建变量</li><li>指针变量是用来存放地址的</li><li>指针变量的大小取决于一个地址存放的时候需要多大的空间</li><li>32位机器上的地址：32bit/4byte</li><li>64位机器上的地址：64bit/8byte</li></ul><h2 id="1-14-结构体"><a href="#1-14-结构体" class="headerlink" title="1.14 结构体"></a>1.14 结构体</h2><ul><li>结构体是把一些单一类型的组合在一起的做法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//学生</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stu</span><br>&#123;<br>    <span class="hljs-comment">//成员</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> sex[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">char</span> tele[<span class="hljs-number">12</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stu</span> s = &#123;<span class="hljs-string">&quot;ZhangSan&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;nan&quot;</span>,<span class="hljs-string">&quot;12345678901&quot;</span>&#125;;<br>    <span class="hljs-comment">//结构体对象.成员名</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %s %s\n&quot;</span>,s.name, s.age, s.sex, s.tele);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; ZhangSan <span class="hljs-number">20</span> nan <span class="hljs-number">12345678901</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stu</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> sex[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">char</span> tele[<span class="hljs-number">12</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Stu* ps)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %s %s\n&quot;</span>, (*ps).name, (*ps).age, (*ps).sex, (*ps).tele);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %s %s\n&quot;</span>, ps-&gt;name, ps-&gt;age, ps-&gt;sex, ps-&gt;tele);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stu</span> s = &#123;<span class="hljs-string">&quot;ZhangSan&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;nan&quot;</span>, <span class="hljs-string">&quot;12345678901&quot;</span>&#125;;<br>    <span class="hljs-built_in">print</span>(&amp;s);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; ZhangSan <span class="hljs-number">20</span> nan <span class="hljs-number">12345678901</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="二、分支语句"><a href="#二、分支语句" class="headerlink" title="二、分支语句"></a>二、分支语句</h1><p>C语句可分为以下五类：</p><ol><li>表达式语句</li><li>函数调用语句</li><li>控制语句</li><li>复合语句</li><li>空语句</li></ol><p><strong>控制语句</strong>用于控制程序的执行流程，以实现程序的各种结构方式，它们由特定的语句定义符组成，C语言有九种控制语句。<br>可以分为以下三类：</p><ol><li>条件判断语句，也叫分支语句：if语句、switch语句;</li><li>循环执行语句：do while语句、while语句、for语句;</li><li>转向语句：break语句、goto语句、continue语句、return语句。</li></ol><h2 id="2-1-if语句"><a href="#2-1-if语句" class="headerlink" title="2.1 if语句"></a>2.1 if语句</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss">语法结构：<br><span class="hljs-built_in">if</span>(表达式)<br>    语句;<br><span class="hljs-built_in">if</span>(表达式)<br>    语句<span class="hljs-number">1</span>;<br>else<br>    语句<span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//多分支</span><br><span class="hljs-built_in">if</span>(表达式<span class="hljs-number">1</span>)<br>    语句<span class="hljs-number">1</span>;<br>else <span class="hljs-built_in">if</span>(表达式<span class="hljs-number">2</span>)<br>    语句<span class="hljs-number">2</span>;<br>else<br>    语句<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int main()<br>&#123;<br>    if(<span class="hljs-number">3</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">5</span>)<br>    printf(<span class="hljs-string">&quot;hehe\n&quot;</span>)<span class="hljs-comment">;</span><br><br>&#125;<br>&gt; 运行结果：<br>&gt; <br><br>int main()<br>&#123;<br>    if(<span class="hljs-number">3</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>)<br>    printf(<span class="hljs-string">&quot;hehe\n&quot;</span>)<span class="hljs-comment">;</span><br><br>&#125;<br>&gt; 运行结果：<br>&gt; hehe<br><br>int main()<br>&#123;<br>    int a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>    if(a <span class="hljs-operator">=</span> <span class="hljs-number">3</span>)<br>    printf(<span class="hljs-string">&quot;hehe\n&quot;</span>)<span class="hljs-comment">;</span><br><br>&#125;<br>&gt; 运行结果：<br>&gt; hehe<br>虽然a不等于<span class="hljs-number">3</span>，但是被赋值为<span class="hljs-number">3</span>，if后的括号判断不为<span class="hljs-number">0</span>即可正常执行<br><br>int main()<br>&#123;<br>    int a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>    if(a <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">3</span>)<br>    printf(<span class="hljs-string">&quot;hehe\n&quot;</span>)<span class="hljs-comment">;</span><br><br>&#125;<br>&gt; 运行结果：<br>&gt; <br></code></pre></td></tr></table></figure><h3 id="2-1-1-悬空else"><a href="#2-1-1-悬空else" class="headerlink" title="2.1.1 悬空else"></a>2.1.1 悬空else</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> age = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//if (age &lt; 18)</span><br>        <span class="hljs-comment">//printf(&quot;青少年\n&quot;);</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">18</span> &lt;= age &lt; <span class="hljs-number">28</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;青年\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 青年<br>在<span class="hljs-number">18</span> &lt;= age &lt; <span class="hljs-number">28</span>中，age = <span class="hljs-number">10</span>,<span class="hljs-number">18</span> &lt;= <span class="hljs-number">10</span>是错误的，返回<span class="hljs-number">0</span><br>变为 <span class="hljs-number">0</span> &lt; <span class="hljs-number">28</span>,所以打印“青年”<br><br><span class="hljs-type">int</span> <span class="hljs-built_in">main</span>()<br>&#123;<br>    <span class="hljs-type">int</span> age = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;age);<br>    <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">18</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;青少年\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age&gt;=<span class="hljs-number">18</span> &amp;&amp; age &lt; <span class="hljs-number">28</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;青年\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age&gt;=<span class="hljs-number">28</span> &amp;&amp; age &lt; <span class="hljs-number">40</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;中年\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age&gt;=<span class="hljs-number">40</span> &amp;&amp; age &lt; <span class="hljs-number">60</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;壮年\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age&gt;=<span class="hljs-number">60</span> &amp;&amp; age &lt;= <span class="hljs-number">100</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;老年\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;老寿星\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int main()<br>&#123;<br>    int a <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    int b <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>    if(a <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">1</span>)<br>        if(b <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">2</span>)<br>        printf(<span class="hljs-string">&quot;hehe\n&quot;</span>)<span class="hljs-comment">;</span><br>    else<br>        printf(<span class="hljs-string">&quot;haha\n&quot;</span>)<span class="hljs-comment">;</span><br><br>    return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br><br>&gt; 运行结果：<br>&gt; <br>else 和离的最近的 if 匹配<br></code></pre></td></tr></table></figure><h3 id="2-1-2-if书写形式的对比"><a href="#2-1-2-if书写形式的对比" class="headerlink" title="2.1.2 if书写形式的对比"></a>2.1.2 if书写形式的对比</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-comment">//代码1</span><br><span class="hljs-keyword">if</span>(condition)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">x</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">y</span>;<br><br>&gt; 条件满足返回<span class="hljs-variable language_">x</span>，条件不满足返回<span class="hljs-variable language_">y</span><br><br><span class="hljs-comment">//代码2</span><br><span class="hljs-keyword">if</span>(condition)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">x</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">y</span>;<br>&#125;<br><br>&gt; 条件满足返回<span class="hljs-variable language_">x</span>，条件不满足返回<span class="hljs-variable language_">y</span><br><br><span class="hljs-comment">//代码3</span><br>int main()<br>&#123;<br>    int num = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">5</span> == num)<span class="hljs-comment">//if(num == 5)</span><br>        printf(<span class="hljs-string">&quot;hehe\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 解决<span class="hljs-string">&quot;num == 5&quot;</span>可能会错输为<span class="hljs-string">&quot;num = 5&quot;</span>导致出现bug的问题<br></code></pre></td></tr></table></figure><h3 id="2-1-3-练习"><a href="#2-1-3-练习" class="headerlink" title="2.1.3 练习"></a>2.1.3 练习</h3><ul><li>判断一个数是否为奇数<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>&quot;</span>, &amp;num);<br>    <span class="hljs-keyword">if</span>(num<span class="hljs-variable">%2</span> == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> 是奇数\n&quot;</span>,num);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> 是偶数\n&quot;</span>,num);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>输出1-100之间的奇数<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">num</span> &lt;= <span class="hljs-number">100</span>)<br>    &#123;<br>        <span class="hljs-built_in">num</span>++;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">num</span>%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>        &#123;<br>            printf(<span class="hljs-string">&quot;%d 是奇数\n&quot;</span>,<span class="hljs-built_in">num</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">num</span> &lt; <span class="hljs-number">100</span>)<br>    &#123;<br>        <span class="hljs-built_in">num</span> += <span class="hljs-number">2</span>;<br>        printf(<span class="hljs-string">&quot;%d 是奇数\n&quot;</span>,<span class="hljs-built_in">num</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-2-switch语句"><a href="#2-2-switch语句" class="headerlink" title="2.2 switch语句"></a>2.2 switch语句</h2><h3 id="2-2-1-在switch语句中break的用法"><a href="#2-2-1-在switch语句中break的用法" class="headerlink" title="2.2.1 在switch语句中break的用法"></a>2.2.1 在switch语句中break的用法</h3><p>输入数字，显示星期x</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> day = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;day);<br>    <span class="hljs-keyword">switch</span>(day)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期一\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期二\n&quot;</span>); <br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期三\n&quot;</span>); <br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期四\n&quot;</span>); <br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期五\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期六\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期日\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>case 后必须是整型常量表达式<br>修改需求，输入 1 - 5 显示weekday，输入 6 - 7 显示weekend<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> day = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;day);<br>    <span class="hljs-keyword">switch</span>(day)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;weekday\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;weekend\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;    <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-2-default子句"><a href="#2-2-2-default子句" class="headerlink" title="2.2.2 default子句"></a>2.2.2 default子句</h3><p>针对上面代码，出现输入超过 7 的情况，用 default 解决</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> day = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;day);<br>    <span class="hljs-keyword">switch</span>(day)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;weekday\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;weekend\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>; <br>    <span class="hljs-keyword">default</span>：<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入错误\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-3-练习"><a href="#2-2-3-练习" class="headerlink" title="2.2.3 练习"></a>2.2.3 练习</h3><p>求运行完代码的结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">switch</span> (n)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: m++;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: n++;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">switch</span>(n)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: n++;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: m++; n++;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        m++;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m = %d, n = %d\n&quot;</span>, m, n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>m = 5<br>n = 3<br><img src="https://s21.ax1x.com/2025/01/13/pEPjdCq.jpg"></p></blockquote><h1 id="三、循环语句"><a href="#三、循环语句" class="headerlink" title="三、循环语句"></a>三、循环语句</h1><ul><li>while</li><li>for</li><li>do while</li></ul><h2 id="3-1-while循环"><a href="#3-1-while循环" class="headerlink" title="3.1 while循环"></a>3.1 while循环</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">while</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="3-1-1-while循环中的break"><a href="#3-1-1-while循环中的break" class="headerlink" title="3.1.1 while循环中的break"></a>3.1.1 while循环中的break</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">5</span> == i)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">break</span>会跳出<span class="hljs-keyword">while</span>循环<br></code></pre></td></tr></table></figure><h3 id="3-1-2-while循环中的continue"><a href="#3-1-2-while循环中的continue" class="headerlink" title="3.1.2 while循环中的continue"></a>3.1.2 while循环中的continue</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">5</span> == i)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <br><span class="hljs-keyword">continue</span>会跳过本次后面的代码，直接去判断部分，进行下一次循环的判断<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>)<br>    &#123;<br>        i++;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">5</span> == i)  <br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&gt; 运行结果：<br>&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><h3 id="3-1-3-scanf和putchar"><a href="#3-1-3-scanf和putchar" class="headerlink" title="3.1.3 scanf和putchar"></a>3.1.3 scanf和putchar</h3><h4 id="3-1-3-1-scanf和putchar的使用"><a href="#3-1-3-1-scanf和putchar的使用" class="headerlink" title="3.1.3.1 scanf和putchar的使用"></a>3.1.3.1 scanf和putchar的使用</h4><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">int main()<br>&#123;<br>    int ch = getchar();<br>    printf(&quot;%c\n&quot;,ch);<br>    putchar(ch);<br><br>    return 0;<br>&#125;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">运行结果：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">输入：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">e</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">输出:</span><br>e<br>e<br><br>int main()<br>&#123;<br>    int ch = 0;<br>    while((ch = getchar() != EOF))<br>    &#123;<br>        putchar(ch);<br>    &#125;    <br><br>    return 0;<br>&#125;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">运行结果：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">输入：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">a</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">b</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">c</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">输出:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">a</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">b</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">c</span><br>按ctrl+z停止运行，EOF是一个整型，表示的值是-1<br></code></pre></td></tr></table></figure><h4 id="3-1-3-2-scanf和putchar的区别"><a href="#3-1-3-2-scanf和putchar的区别" class="headerlink" title="3.1.3.2 scanf和putchar的区别"></a>3.1.3.2 scanf和putchar的区别</h4><ul><li>scanf不会拿“\n”<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> password[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入密码：&gt;&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, password);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请确认密码(Y/N)：&gt; &quot;</span>);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;Y&#x27;</span> == ret)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 输入：<br>&gt; abcdef<br><br>&gt; 运行结果：<br>&gt; 请输入密码：&gt;abcdef<br>&gt; 请确认密码(Y/N)：&gt; No<br>不符合预期，原预期应该是输入完密码后，再输入Y/N确定密码。<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> password[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入密码：&gt;&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, password);          <span class="hljs-comment">//abcdef</span><br>    <span class="hljs-built_in">getchar</span>();                      <span class="hljs-comment">//读取了\n</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请确认密码(Y/N)：&gt; &quot;</span>);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;Y&#x27;</span> == ret)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 输入<span class="hljs-number">1</span>：<br>&gt; abcdef<br>&gt; N<br><br>&gt; 运行结果<span class="hljs-number">1</span>：<br>&gt; 请输入密码：&gt;abcdef<br>&gt; 请确认密码(Y/N)：&gt;N<br>&gt; No<br><br>仍是上述代码，改变输入：<br><br>&gt; 输入<span class="hljs-number">2</span>：<br>&gt; abcdef defghi<br><br>&gt; 运行结果<span class="hljs-number">2</span>：<br>&gt; 请输入密码：&gt;abcdef defghi<br>&gt; 请确认密码(Y/N)：&gt;No<br></code></pre></td></tr></table></figure><img src="https://s21.ax1x.com/2025/01/14/pEiU6IK.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> password[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入密码：&gt;&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, password);          <br>    <span class="hljs-keyword">while</span>((ch = <span class="hljs-built_in">getchar</span>() != <span class="hljs-string">&#x27;\n&#x27;</span>))          <br>    &#123;<br>        ;           <span class="hljs-comment">//  读取&#x27;\n&#x27;前面的所有内容</span><br>    &#125;          <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请确认密码(Y/N)：&gt; &quot;</span>);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;Y&#x27;</span> == ret)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 输入：<br>&gt; abcdef defghi<br>&gt; Y<br><br>&gt; 运行结果：<br>&gt; 请输入密码：&gt;abcdef defghi<br>&gt; 请确认密码(Y/N)：&gt;Y<br>&gt; Yes<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-1-4-练习"><a href="#3-1-4-练习" class="headerlink" title="3.1.4 练习"></a>3.1.4 练习</h4><ul><li><p>简述下列代码的功能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">while</span>((ch = <span class="hljs-built_in">getchar</span>()) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt;<span class="hljs-string">&#x27;9&#x27;</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">putchar</span>(ch);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>功能：只打印数字字符<br></code></pre></td></tr></table></figure></li><li><p>输入一个人的生日(包括年月日)，年月日之间没有分隔符。<br>示例1:<br>输入：<br>20130225<br>输出：<br>year=2013<br>month=02<br>date=25</p></li><li><p>备注：通过scanf函数的<code>%m格式控制</code>可以指定输入域宽，输入数据域宽(列数)，按此宽度截取所需数据;通过printf函数的<code>%0格式控制符</code>，输出数值时指定左面不使用的空位置自动填0。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">year</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">month</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">date</span> = <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;%4d%2d%2d&quot;</span>, &amp;<span class="hljs-built_in">year</span>, &amp;<span class="hljs-built_in">month</span>, &amp;<span class="hljs-built_in">day</span>);<br><br>    printf(<span class="hljs-string">&quot;year=%d\n&quot;</span>,<span class="hljs-built_in">year</span>);<br>    printf(<span class="hljs-string">&quot;month=%02d\n&quot;</span>,<span class="hljs-built_in">month</span>);<br>    printf(<span class="hljs-string">&quot;date=%02d\n&quot;</span>,<span class="hljs-built_in">date</span>);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-2-for循环"><a href="#3-2-for循环" class="headerlink" title="3.2 for循环"></a>3.2 for循环</h2><h3 id="3-2-1-语法"><a href="#3-2-1-语法" class="headerlink" title="3.2.1 语法"></a>3.2.1 语法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(表达式<span class="hljs-number">1</span><span class="hljs-comment">; 表达式2; 表达式3)</span><br>    循环语句<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>表达式1</strong><br>表达式1为<strong>初始化部分</strong>，用于初始化循环变量的。<br><strong>表达式2</strong><br>表达式2为<strong>条件判断部分</strong>，用于判断循环时候终止。<br><strong>表达式3</strong><br>表达式3为<strong>调整部分</strong>，用于循环条件的调整。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="3-2-2-for循环中的break"><a href="#3-2-2-for循环中的break" class="headerlink" title="3.2.2 for循环中的break"></a>3.2.2 for循环中的break</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">break</span>会跳出<span class="hljs-keyword">for</span>循环<br></code></pre></td></tr></table></figure><h3 id="3-2-3-for循环中的continue"><a href="#3-2-3-for循环中的continue" class="headerlink" title="3.2.3 for循环中的continue"></a>3.2.3 for循环中的continue</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">continue</span>会跳过本次后面的代码，直接去调整部分<br></code></pre></td></tr></table></figure><h3 id="3-2-4-一些for循环的变种"><a href="#3-2-4-一些for循环的变种" class="headerlink" title="3.2.4 一些for循环的变种"></a>3.2.4 一些for循环的变种</h3><p>1.for循环的判断部分省略意味着判断会恒成立</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">int main()<br>&#123;<br>    for( ; ; )<br>    &#123;<br>        printf(&quot;hehe\n&quot;);<br>    &#125;<br><br>    return 0;<br>&#125;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">运行结果：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br>……<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br>程序陷入死循环<br></code></pre></td></tr></table></figure><p>2.for循环的嵌套</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int main()<br>&#123;<br>    int i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    int j <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    for(i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;i &lt; 3;i++)</span><br>    &#123;<br>        for(j <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;j &lt; 3;j++)</span><br>        &#123;<br>            printf(<span class="hljs-string">&quot;hehe\n&quot;</span>)<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br><br>    return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br><br>一共打印了<span class="hljs-number">9</span>行hehe<br></code></pre></td></tr></table></figure><p>3.基于2中省略掉循环内的初始化部分</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int main()<br>&#123;<br>    int i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    int j <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    for (<span class="hljs-comment">;i &lt; 3;i++)</span><br>    &#123;<br>        for (<span class="hljs-comment">;j &lt; 3;j++)</span><br>        &#123;<br>            printf(<span class="hljs-string">&quot;hehe\n&quot;</span>)<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br><br>    return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br><br>&gt; 运行结果：<br>&gt; hehe<br>&gt; hehe<br>&gt; hehe<br>内循环的j变为<span class="hljs-number">3</span>时，不再进入内循环<br></code></pre></td></tr></table></figure><p>4.使用多余一个变量控制循环</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gml">int main()<br>&#123;<br>    int <span class="hljs-variable language_">x</span>,<span class="hljs-variable language_">y</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable language_">x</span> = <span class="hljs-number">0</span>,<span class="hljs-variable language_">y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable language_">x</span>&lt;<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-variable language_">y</span>&lt;<span class="hljs-number">5</span>; ++<span class="hljs-variable language_">x</span>,  <span class="hljs-variable language_">y</span>++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;hehe\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; hehe<br>&gt; hehe<br></code></pre></td></tr></table></figure><h3 id="3-2-5-练习"><a href="#3-2-5-练习" class="headerlink" title="3.2.5 练习"></a>3.2.5 练习</h3><p>请问循环多少次？</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>,k = <span class="hljs-number">0</span>; k = <span class="hljs-number">0</span>; i++, k++)<br>        k++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-number">0</span>次，因为在判断语句<span class="hljs-string">&quot;k=0&quot;</span>中，这是赋值语句，不是判断语句<br></code></pre></td></tr></table></figure><h2 id="3-3-do…while-循环"><a href="#3-3-do…while-循环" class="headerlink" title="3.3 do…while()循环"></a>3.3 do…while()循环</h2><h3 id="3-3-1-do语句的语法"><a href="#3-3-1-do语句的语法" class="headerlink" title="3.3.1 do语句的语法"></a>3.3.1 do语句的语法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">do<br>    循环语句<span class="hljs-comment">;</span><br>while(表达式)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="3-3-2-do…while-循环中的break"><a href="#3-3-2-do…while-循环中的break" class="headerlink" title="3.3.2 do…while()循环中的break"></a>3.3.2 do…while()循环中的break</h3><p>先i++：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        i++;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>后i++：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>break会跳出for循环</p><h3 id="3-3-2-do…while-循环中的continue"><a href="#3-3-2-do…while-循环中的continue" class="headerlink" title="3.3.2 do…while()循环中的continue"></a>3.3.2 do…while()循环中的continue</h3><p>先i++：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        i++;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br><br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>后i++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>continue会跳过本次后面的代码，直接去判断部分，进行下一次循环的判断</p><h3 id="3-3-3-do…while-循环的特点"><a href="#3-3-3-do…while-循环的特点" class="headerlink" title="3.3.3 do…while()循环的特点"></a>3.3.3 do…while()循环的特点</h3><ul><li>循环至少执行一次，使用的场景有限，所以不是经常使用。</li><li>使用频率：for &gt; while &gt; do…while</li></ul><h2 id="3-4-练习"><a href="#3-4-练习" class="headerlink" title="3.4 练习"></a>3.4 练习</h2><p>1.计算n的阶乘</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs excel">f<span class="hljs-symbol">or:</span><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">1</span>;<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;<span class="hljs-built_in">n</span>);<br>    for(i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-built_in">n</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> * i;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">sum</span>);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br>whi<span class="hljs-symbol">le:</span><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> m = <span class="hljs-number">1</span>;<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-built_in">n</span>);<br>    while (<span class="hljs-built_in">n</span> &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        m = m * <span class="hljs-built_in">n</span>;<br>        <span class="hljs-built_in">n</span>--;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;%d&quot;</span>, m);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.计算1!+2!+……+10!</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> temp = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>    for (<span class="hljs-built_in">n</span> = <span class="hljs-number">1</span>;<span class="hljs-built_in">n</span> &lt;= <span class="hljs-number">10</span>; <span class="hljs-built_in">n</span>++)<br>    &#123;<br>        for (i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-built_in">n</span>; i++)<br>        &#123;<br>            temp = temp * i;<br>        &#125;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, temp);<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + temp;<br>        temp = <span class="hljs-number">1</span>;   <br>    &#125;     <br>    <br>    printf(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">sum</span>);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br>效果不是很好，有两层循环<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> temp = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>    for(<span class="hljs-built_in">n</span> = <span class="hljs-number">1</span>; <span class="hljs-built_in">n</span> &lt;= <span class="hljs-number">10</span>; <span class="hljs-built_in">n</span>++)<br>    &#123;<br>        temp = temp * <span class="hljs-built_in">n</span>;<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + temp;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">sum</span>);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在一个有序数组中查找具体的某个数字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<span class="hljs-comment">//在一个有序数组中查找具体的某个数字</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-built_in">sizeof</span>(arr)/<span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;sz;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(arr[i] == k)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到了，下标是：%d\n&quot;</span>,i);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(i == sz)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找不到&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二分法/折半查找法：<br><img src="https://s21.ax1x.com/2025/01/19/pEkcT2R.png"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> sz = sizeof(arr)/sizeof(arr[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span> = sz - <span class="hljs-number">1</span>;<br><br><br>    while(<span class="hljs-built_in">left</span>&lt;=<span class="hljs-built_in">right</span>)<br>    &#123;<br>        //<span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span> = (<span class="hljs-built_in">left</span> + <span class="hljs-built_in">right</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span> = <span class="hljs-built_in">left</span> + (<span class="hljs-built_in">right</span> - <span class="hljs-built_in">left</span>) / <span class="hljs-number">2</span>;    //如果给的数组过大，有可能会导致上行<span class="hljs-built_in">int</span>值溢出<br><br>        <span class="hljs-built_in">if</span>(arr[<span class="hljs-built_in">mid</span>] &lt; k)<br>        &#123;<br>            <span class="hljs-built_in">left</span> = <span class="hljs-built_in">mid</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        else <span class="hljs-built_in">if</span>(arr[<span class="hljs-built_in">mid</span>] &gt; k)<br>        &#123;<br>            <span class="hljs-built_in">right</span> = <span class="hljs-built_in">mid</span> - <span class="hljs-number">1</span>;<br>        &#125;    <br>        else<br>        &#123;<br>            printf(<span class="hljs-string">&quot;找到了，下标是%d\n&quot;</span>, <span class="hljs-built_in">mid</span>);<br>            break;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">if</span>(<span class="hljs-built_in">left</span>&gt;<span class="hljs-built_in">right</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;找不到\n&quot;</span>);<br>    &#125;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.编写代码，演示多个字符从两端移动，向中间汇聚<br>如：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">##################<br>W################!<br>We##############!!<br>Wel############!!!<br>Welc########## !!!<br>Welco########t !!!<br>Welcom######it !!!<br>Welcome####Bit !!!<br>Welcome ## Bit !!!<br>Welcome To Bit !!!<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;Welcome To Bit !!!&quot;</span>;<br>    <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;##################&quot;</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = <span class="hljs-built_in">strlen</span>(arr2) - <span class="hljs-number">1</span>;<br><br>   <br>    <span class="hljs-keyword">while</span>(left &lt;= right)<br>    &#123;<br>        arr2[left] = arr1[left];<br>        arr2[right] = arr1[right];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr2);<br>        <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);    <span class="hljs-comment">//类似于delay函数</span><br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);  <span class="hljs-comment">//在同一行执行</span><br>        left++;<br>        right--;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr2);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.编写代码，模拟用户登录场景，并且只能登录三次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> password[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入密码： &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,password);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(password, <span class="hljs-string">&quot;abcdef&quot;</span>) == <span class="hljs-number">0</span>)       <span class="hljs-comment">//比较两个字符串是否相等，要用库函数strcmp，而不能用&quot;==&quot;</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;登陆成功\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;密码错误，请重新输入\n&quot;</span>);<br><br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;三次密码均输入错误，退出程序\n&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.猜数据游戏<br>电脑产生一个随机数字(1-100)，猜数字，猜大猜小给出对应的反馈,直到猜对了结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****************************\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********  1.play  *********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********  0.exit  *********\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****************************\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">game</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> guess = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">rand</span>()%<span class="hljs-number">100</span><span class="hljs-number">+1</span>;                 <span class="hljs-comment">//生成随机数的函数,范围1~100</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请猜数字：&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;guess);<br><br>        <span class="hljs-keyword">if</span>(guess &lt; ret)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜小了\n&quot;</span>);<br>        &#125;<br>            <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guess &gt; ret)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜大了\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;恭喜你，猜对了\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;        <br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));    <span class="hljs-comment">//生成随机数,时间戳函数，是随机的</span><br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-built_in">menu</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input);<br>        <span class="hljs-keyword">switch</span>(input)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜数字\n&quot;</span>);<br>                <span class="hljs-built_in">game</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择错误，重新选择！\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(input);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-goto语句"><a href="#3-5-goto语句" class="headerlink" title="3.5 goto语句"></a>3.5 goto语句</h2><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">int main()<br>&#123;<br>again:<br>    printf(&quot;hehe\n&quot;);<br>    printf(&quot;haha\n&quot;);<br>    goto again;<br><br>    return 0;<br>&#125;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">运行结果：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">haha</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">haha</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">haha</span><br>……<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">hehe</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">haha</span><br>无限循环<br></code></pre></td></tr></table></figure><p>goto语言真正适合的场景如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit">for(...)<br>    for(...)<br>    &#123;<br>        for(...)<br>        &#123;<br>            if(disaster)<br>                goto error;<br>        &#125;<br>    &#125;<br>...<br><span class="hljs-keyword">error:</span><br><span class="hljs-keyword">    </span>if(disaster)<br>        //处理特殊情况<br></code></pre></td></tr></table></figure><p>试写一个关机程序<br>1、电脑运行起来后，1分钟内关机<br>2、如果输入：我是猪，就取消关机</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> input[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;shutdown -s -t 60&quot;</span>);<br>again:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请注意，你的电脑将在60秒后关机，如果输入“我是猪”，就取消关机\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,input);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(input,<span class="hljs-string">&quot;我是猪&quot;</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;shutdown -a&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">goto</span> again;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、-函数"><a href="#四、-函数" class="headerlink" title="四、 函数"></a>四、 函数</h1><h2 id="4-1-什么是函数"><a href="#4-1-什么是函数" class="headerlink" title="4.1 什么是函数"></a>4.1 什么是函数</h2><p>维基百科中对函数的定义：子程序</p><blockquote><p>· 在计算机科学中，子程序(英语:Subroutine,procedure,function,routine,method,subprogram，callable unit)，是一个大型程序中的某部分代码，由一个或多个语句块组成。它负责完成某项特定任务，而且相较于其他代码，具备相对的独立性。<br>· 一般会有输入参数并有返回值，提供对过程的封装和细节的隐藏。这些代码通常被集成为软件库。</p></blockquote><h2 id="4-2-C语言中函数的分类"><a href="#4-2-C语言中函数的分类" class="headerlink" title="4.2 C语言中函数的分类"></a>4.2 C语言中函数的分类</h2><ol><li>库函数</li><li>自定义函数</li></ol><h3 id="4-2-1-库函数"><a href="#4-2-1-库函数" class="headerlink" title="4.2.1 库函数"></a>4.2.1 库函数</h3><p>为什么会有库函数？<br>1.我们知道在我们学习C语言编程的时候，总是在一个代码编写完成之后迫不及待的想知道结果，想把这个结果打印到我们的屏幕上看看。这个时候我们会频繁的使用一个功能:将信息按照一定的格式打印到屏幕上(printf)<br>2.在编程的过程中我们会频繁的做一些字符串的拷贝工作(strcpy)<br>3.在编程是我们也计算，总是会计算n的k次方这样的运算(pow)。<br>像上面我们描述的基础功能，它们不是业务性的代码。我们在开发的过程中每个程序员都可能用的到，为了支持可移植性和提高程序的效率，所以C语言的基础库中提供了一系列类似的库函数，方便程序员进行软件开发。<br>相关资料：<a href="https://cplusplus.com/reference/">https://cplusplus.com/reference/</a></p><p>简单总结，C语言常用的库函数有：</p><ul><li>IO函数</li><li>字符串操作函数</li><li>字符操作函数</li><li>内存操作函数</li><li>时间/日期函数</li><li>数学函数</li><li>其他库函数<br>参照文档，尝试学习几个库函数：<br><a href="https://legacy.cplusplus.com/reference/cstring/strcpy/?kw=strcpy">strcpy</a><br><img src="https://s21.ax1x.com/2025/01/24/pEEFPYV.jpg"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr1[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;hello bit&quot;</span>;<br><br>    <span class="hljs-built_in">strcpy</span>(arr1, arr2);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, arr1);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><a href="https://legacy.cplusplus.com/reference/cstring/memset/?kw=memset">memset</a><br><img src="https://s21.ax1x.com/2025/01/24/pEEFmwR.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    <span class="hljs-built_in">memset</span>(arr,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&gt; 运行结果：<br>&gt; <span class="hljs-function">xxxxx World</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    <span class="hljs-built_in">memset</span>(arr<span class="hljs-number">+6</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&gt; 运行结果：<br>&gt; Hello yyyld<br></code></pre></td></tr></table></figure></li></ul><p><strong>注：</strong><br>使用库函数，必须包含<code>#include</code>对应的头文件<br>库函数查询工具：</p><blockquote><p>MSDN<br><a href="http://www.cplusplus.com/">www.cplusplus.com</a><br><a href="http://en.cppreference.com(英文版)/">http://en.cppreference.com(英文版)</a><br><a href="http://zh.cppreference.com(中文版)/">http://zh.cppreference.com(中文版)</a></p></blockquote><h3 id="4-2-2-自定义函数"><a href="#4-2-2-自定义函数" class="headerlink" title="4.2.2 自定义函数"></a>4.2.2 自定义函数</h3><p>自定义函数和库函数一样，有函数名，返回值类型和函数参数。<br>函数的组成：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">ret_tpye</span> <span class="hljs-title function_">fun_name</span>(<span class="hljs-params">par1</span>, * )<br>&#123;<br>    <span class="hljs-variable">statement</span>;<span class="hljs-comment">//语句项</span><br>&#125;<br><br><span class="hljs-variable">ret_tpye</span> 返回类型<br><span class="hljs-variable">fun_name</span> 函数名<br><span class="hljs-variable">para1</span>    函数参数<br></code></pre></td></tr></table></figure><ul><li>写一个函数比较两个整数较大值<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_max</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x &gt; y ? x : y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;a, &amp;b);<br>    <span class="hljs-type">int</span> max = <span class="hljs-built_in">get_max</span>(a,b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,max);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>写一个函数交换两个整型变量的内容<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs perl">void Swap(<span class="hljs-keyword">int</span> <span class="hljs-keyword">x</span>, <span class="hljs-keyword">int</span> <span class="hljs-keyword">y</span>)<br>&#123;<br>    <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>    temp = <span class="hljs-keyword">x</span>;<br>    <span class="hljs-keyword">x</span> = <span class="hljs-keyword">y</span>;<br>    <span class="hljs-keyword">y</span> = temp;<br><br>&#125;<br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span>&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;交换前a = <span class="hljs-variable">%d</span>,b = <span class="hljs-variable">%d</span>\n&quot;</span>, a, b);<br><br>    Swap(a, b);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;交换后a = <span class="hljs-variable">%d</span>,b = <span class="hljs-variable">%d</span>\n&quot;</span>, a, b);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 输入：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><br>&gt; 运行结果：<br>&gt; 交换前a = <span class="hljs-number">1</span>,b = <span class="hljs-number">2</span><br>&gt; 交换后a = <span class="hljs-number">1</span>,b = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>函数没完成交换功能，原因如下：<br><img src="https://s21.ax1x.com/2025/01/24/pEEZSPI.png"><br>a,b,x,y分别有着不同的地址，a,b作为实参只是作为x,y形参的一份临时拷贝，对形参的修改不会影响实参<br>更正代码后：<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs perl">void Swap(<span class="hljs-keyword">int</span> *px, <span class="hljs-keyword">int</span> *py)<br>&#123;<br>    <span class="hljs-keyword">int</span> z = *px;    <span class="hljs-regexp">//a</span><br>    *px = *py;      <span class="hljs-regexp">//a</span>=b<br>    *py = z;        <span class="hljs-regexp">//</span>b=a<br>&#125;<br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span>&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;交换前a = <span class="hljs-variable">%d</span>,b = <span class="hljs-variable">%d</span>\n&quot;</span>, a, b);<br><br>    Swap(&amp;a, &amp;b);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;交换后a = <span class="hljs-variable">%d</span>,b = <span class="hljs-variable">%d</span>\n&quot;</span>, a, b);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 输入：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><br>&gt; 运行结果：<br>&gt; 交换前a = <span class="hljs-number">1</span>,b = <span class="hljs-number">2</span><br>&gt; 交换后a = <span class="hljs-number">2</span>,b = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs perl">void Swap(<span class="hljs-keyword">int</span> *px, <span class="hljs-keyword">int</span> *py)<br>&#123;<br>    <span class="hljs-keyword">int</span> z = *px;    <span class="hljs-regexp">//a</span><br>    *px = *py;      <span class="hljs-regexp">//a</span>=b<br>    *py = z;        <span class="hljs-regexp">//</span>b=a<br>&#125;<br><br><span class="hljs-keyword">int</span> ADD(<span class="hljs-keyword">int</span> <span class="hljs-keyword">x</span>,<span class="hljs-keyword">int</span> <span class="hljs-keyword">y</span>)<br>&#123;<br>    <span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>;<br>    z = <span class="hljs-keyword">x</span> + <span class="hljs-keyword">y</span>;<br>    <br>    <span class="hljs-keyword">return</span> z;<br>&#125;<br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span>&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;交换前a = <span class="hljs-variable">%d</span>,b = <span class="hljs-variable">%d</span>\n&quot;</span>, a, b);<br><br>    Swap(&amp;a, &amp;b);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;交换后a = <span class="hljs-variable">%d</span>,b = <span class="hljs-variable">%d</span>\n&quot;</span>, a, b);<br><br>    <span class="hljs-keyword">int</span> c = ADD(a,b);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;c = <span class="hljs-variable">%d</span>\n&quot;</span>, c);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 输入：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><br>&gt; 运行结果：<br>&gt; 交换前a = <span class="hljs-number">1</span>,b = <span class="hljs-number">2</span><br>&gt; 交换后a = <span class="hljs-number">2</span>,b = <span class="hljs-number">1</span><br>&gt; c = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>Q1:ADD函数不需要取地址，而Swap函数需要取地址，为什么？<br>A1:如果需要改变变量数值需要传地址，如果不需要改变则不需要<br>Q2:Swap函数一定需要取地址吗？<br>A2：<br><img src="https://s21.ax1x.com/2025/01/26/pEE50gS.jpg"></li></ul><h2 id="4-3-函数的参数"><a href="#4-3-函数的参数" class="headerlink" title="4.3 函数的参数"></a>4.3 函数的参数</h2><h3 id="4-3-1-实际参数-实参"><a href="#4-3-1-实际参数-实参" class="headerlink" title="4.3.1 实际参数(实参)"></a>4.3.1 实际参数(实参)</h3><blockquote><p>真实传给函数的参数，叫实参。<br>实参可以是：常量、变量、表达式、函数等。<br>无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。</p></blockquote><h3 id="4-3-2-形式参数-形参"><a href="#4-3-2-形式参数-形参" class="headerlink" title="4.3.2 形式参数(形参)"></a>4.3.2 形式参数(形参)</h3><blockquote><p>形式参数是指函数名后括号中的变量，因为形式参数只有在函数被调用的过程中才实例化(分配内存单元)，所以叫形式参数。<br>形式参数当函数调用完成之后就自动销毁了。因此形式参数只在函数中有效。</p></blockquote><p>我们可以简单的认为：<strong>形参实例化之后其实相当于实参的一份临时拷贝</strong>。</p><h2 id="4-4-函数的调用"><a href="#4-4-函数的调用" class="headerlink" title="4.4 函数的调用"></a>4.4 函数的调用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> z = <span class="hljs-number">0</span>;<br>    z = x;<br>    x = y;<br>    y = z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> *px,<span class="hljs-type">int</span> *py)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> z = <span class="hljs-number">0</span>;<br>    z = px;<br>    px = py;<br>    py = z;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;a, &amp;b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;交换前：a = %d,b = %d\n&quot;</span>,a, b);<br>    <span class="hljs-built_in">Swap1</span>(a, b);<br>    <span class="hljs-built_in">Swap2</span>(&amp;a, &amp;b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;交换后：a = %d,b = %d\n&quot;</span>,a, b);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-1-传值调用"><a href="#4-4-1-传值调用" class="headerlink" title="4.4.1 传值调用"></a>4.4.1 传值调用</h3><p>函数的形参和实参分别占有不同的内存块，对形参的修改不会影响实参。<br>如上述代码中的<code>Swap1(a, b)</code></p><h3 id="4-4-2-传址调用"><a href="#4-4-2-传址调用" class="headerlink" title="4.4.2 传址调用"></a>4.4.2 传址调用</h3><blockquote><p><strong>·</strong> 传值调用是把函数外部创建的内存地址传递给函数参数的一种调用函数的方式。<br><strong>·</strong> 这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操作函数外部的变量。</p></blockquote><p>如上述代码中的<code>Swap2(&amp;a, &amp;b)</code></p><h3 id="4-4-3-练习"><a href="#4-4-3-练习" class="headerlink" title="4.4.3 练习"></a>4.4.3 练习</h3><p>1.写一个函数可以判断一个数是不是素数<br><strong>注</strong>:素数是只能被1和他本身整除的数</p><p>m = a * b;<br>a和b中一定有一个数字是 &lt;= sqrt(m)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">2</span>;j &lt;= <span class="hljs-built_in">sqrt</span>(n);j++)     <span class="hljs-comment">//sqrt是math.h内的函数，作用是开平方</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(n % j == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_prime</span>(a))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d是素数\n&quot;</span>,a);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d不是素数\n&quot;</span>,a);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.写一个函数判断是不是闰年<br><strong>注</strong>：闰年判断规则有两个，能被4整除并且不能被100整数是闰年，能被400整除也是闰年</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_leap_year</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (((x % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &amp;&amp; (x % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>)) || (x % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> year = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;year);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_leap_year</span>(year))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d是闰年\n&quot;</span>,year);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d不是闰年\n&quot;</span>,year);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.写一个函数，实现一个整型有序数组的二分查找</p><ul><li>数组传参实际上传递的是数组首元素的地址，而不是整个数组，所以在函数内部计算一个函数参数部分的数组的元素个数是不靠谱的</li><li>形参arr看上去是数组，本质是指针<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">binary_search</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> sz)</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> sz - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span>(left &lt;= right)<br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span>(arr[mid] &lt; k)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid] &gt; k)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> mid;     <span class="hljs-comment">//找到下标</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;              <span class="hljs-comment">//找不到</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">22</span>,<span class="hljs-number">36</span>,<span class="hljs-number">43</span>,<span class="hljs-number">48</span>,<span class="hljs-number">56</span>,<span class="hljs-number">64</span>,<span class="hljs-number">78</span>,<span class="hljs-number">90</span> &#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> sizeof(arr)/sizeof(arr[<span class="hljs-number">0</span>]);<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> binary_search(arr, k, sz); <br><br>    <span class="hljs-keyword">if</span>(ret == -<span class="hljs-number">1</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;找不到\n&quot;</span>);<br>    &#125;    <br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        printf(<span class="hljs-string">&quot;找到了，下标是:%d\n&quot;</span>,ret);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>4.写一个函数，每次调用这个函数，就会将num的值增加1</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart">传址调用：<br><span class="hljs-keyword">void</span> ADD(<span class="hljs-built_in">int</span> *p)<br>&#123;<br>    (*p)++;<br>&#125;<br><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">0</span>;<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">num</span>);<br>    ADD(&amp;<span class="hljs-built_in">num</span>);<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">num</span>);<br>    ADD(&amp;<span class="hljs-built_in">num</span>);<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">num</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">int</span> ADD(<span class="hljs-built_in">int</span> n)<br>&#123;<br>    <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//return ++n;</span><br>&#125;<br><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">0</span>;<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">num</span>);<br>    <span class="hljs-built_in">num</span> = ADD(<span class="hljs-built_in">num</span>);<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">num</span>);<br>    <span class="hljs-built_in">num</span> = ADD(<span class="hljs-built_in">num</span>);<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">num</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-函数的嵌套调用和链式访问"><a href="#4-5-函数的嵌套调用和链式访问" class="headerlink" title="4.5 函数的嵌套调用和链式访问"></a>4.5 函数的嵌套调用和链式访问</h2><p>函数和函数之间可以根据实际的需求进行组合的，也就是互相调用的。</p><h3 id="4-5-1-嵌套调用"><a href="#4-5-1-嵌套调用" class="headerlink" title="4.5.1 嵌套调用"></a>4.5.1 嵌套调用</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">new_line</span>()</span><br>&#123;<br>    printf(<span class="hljs-string">&quot;hehe\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">three_line</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">3</span>; i++)<br>    &#123;<br>        new_line();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    three_line();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; hehe<br>&gt; hehe<br>&gt; hehe<br></code></pre></td></tr></table></figure><p>函数是可以嵌套调用的，但是不可以嵌套定义。</p><h3 id="4-5-2-链式访问"><a href="#4-5-2-链式访问" class="headerlink" title="4.5.2 链式访问"></a>4.5.2 链式访问</h3><p>把一个函数的返回值作为另外一个函数的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">strcat</span>(arr,<span class="hljs-string">&quot;bit&quot;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ret);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>&quot;</span>,<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>&quot;</span>,<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>&quot;</span>,<span class="hljs-number">43</span>)));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">4321</span><br></code></pre></td></tr></table></figure><p>printf函数的返回值为整型，是输出字符的个数，即格式化字符串中字符的个数。<br><img src="https://s21.ax1x.com/2025/01/28/pEVQNdK.png"></p><h2 id="4-6-函数的声明和定义"><a href="#4-6-函数的声明和定义" class="headerlink" title="4.6 函数的声明和定义"></a>4.6 函数的声明和定义</h2><h3 id="4-6-1-函数声明"><a href="#4-6-1-函数声明" class="headerlink" title="4.6.1 函数声明"></a>4.6.1 函数声明</h3><blockquote><p>1.告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。但是具体是不是存在，函数声明决定不了。<br>2.函数的声明一般出现在函数的使用之前，要满足<strong>先声明后使用</strong>。<br>3.函数的声明一般要放在头文件中的。</p></blockquote><h3 id="4-6-2-函数定义"><a href="#4-6-2-函数定义" class="headerlink" title="4.6.2 函数定义"></a>4.6.2 函数定义</h3><blockquote><p>函数的定义是指函数的具体实现，交代函数的功能实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数的声明</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ADD</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    scanf(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> ADD(a,b);<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>, sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//函数的定义</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ADD</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>放置函数的声明</strong><br>add.c</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ADD</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>add.h</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ADD</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br></code></pre></td></tr></table></figure><p>test.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;add.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-type">int</span> sum = <span class="hljs-built_in">ADD</span>(a,b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>封装成静态库</strong><br><img src="https://s21.ax1x.com/2025/01/30/pEVhXNt.png" alt="①右键需要封装成库的源文件，点击属性"></p><p><img src="https://s21.ax1x.com/2025/01/30/pEVhx9f.png" alt="②常规-&gt;配置类型-&gt;静态库.lib-&gt;应用">]</p><p>再次运行代码，会在文件路径Debug内生成一个.lib文件，即为静态库<br>使用静态库的方法：<br><code>#pragma comment(lib,&quot;静态库名字&quot;)</code><br><img src="https://s21.ax1x.com/2025/01/30/pEV4I5q.png"></p><h2 id="4-7-函数递归"><a href="#4-7-函数递归" class="headerlink" title="4.7 函数递归"></a>4.7 函数递归</h2><h3 id="4-7-1-什么是递归"><a href="#4-7-1-什么是递归" class="headerlink" title="4.7.1 什么是递归"></a>4.7.1 什么是递归</h3><blockquote><p>程序调用自身的编程技巧成为递归(recursion)。<br>递归作为一种算法在程序设计语言中广泛应用。一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法。<br>它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。<br>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。<br><strong>递归的主要思考在于：把大事化小</strong></p></blockquote><h3 id="4-7-2-递归的两个必要条件"><a href="#4-7-2-递归的两个必要条件" class="headerlink" title="4.7.2 递归的两个必要条件"></a>4.7.2 递归的两个必要条件</h3><ul><li>存在限制条件，当满足这个限制条件的时候，递归便不再继续。</li><li>每次递归调用完之后越来越接近这个限制条件。</li></ul><h4 id="4-7-2-1-练习"><a href="#4-7-2-1-练习" class="headerlink" title="4.7.2.1 练习"></a>4.7.2.1 练习</h4><p>1.接受一个整型值(无符号)，按照顺序打印它的每一位。<br>例如：<br>输入：1234，输出： 1 2 3 4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//递归思想：</span><br><span class="hljs-comment">//print(1234)</span><br><span class="hljs-comment">//print(123)  4</span><br><span class="hljs-comment">//print(12)  3  4</span><br><span class="hljs-comment">//print(1)  2  3  4</span><br><span class="hljs-comment">//print()  1  2  3  4</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">9</span>)<br>    &#123;<br>        <span class="hljs-built_in">print</span>(n / <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, n % <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;num);          <span class="hljs-comment">//%u是打印无符号整数，%d打印有符号整数</span><br>    <span class="hljs-built_in">print</span>(num);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注解：</strong><br><img src="https://s21.ax1x.com/2025/01/30/pEVH1Ve.png"><br><img src="https://s21.ax1x.com/2025/01/30/pEVHPDU.png"><br><strong>如果print函数内部没有</strong><code>if(n &gt; 9)</code><strong>的判断，会死递归导致栈溢出，如下图：</strong><br><img src="https://s21.ax1x.com/2025/01/30/pEVH5a4.png"><br>2.编写函数(不允许创建临时变量)，求字符串的长度。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//递归思想：</span><br><span class="hljs-comment">//my_strlen(&quot;abc&quot;)</span><br><span class="hljs-comment">//1 + my_strlen(&quot;bc&quot;)</span><br><span class="hljs-comment">//1 + 1 + my_strlen(&quot;c&quot;)</span><br><span class="hljs-comment">//1 + 1 + 1 + my_strlen(&quot;&quot;)</span><br><span class="hljs-comment">//1 + 1 + 1 + 0</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">my_strlen</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(*str != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-built_in">my_strlen</span>(str + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> arr[] = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">my_strlen</span>(arr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注解：</strong><br><img src="https://s21.ax1x.com/2025/01/30/pEVqGct.png"><br><img src="https://s21.ax1x.com/2025/01/30/pEVqscq.png"></p><h3 id="4-7-3-递归与迭代"><a href="#4-7-3-递归与迭代" class="headerlink" title="4.7.3 递归与迭代"></a>4.7.3 递归与迭代</h3><h4 id="4-7-3-1-练习"><a href="#4-7-3-1-练习" class="headerlink" title="4.7.3.1 练习"></a>4.7.3.1 练习</h4><p>1.求n的阶乘(不考虑溢出)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//递归的方式</span><br><span class="hljs-comment">//int fac(int n)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//    if(n &lt;= 1)</span><br><span class="hljs-comment">//        return 1;</span><br><span class="hljs-comment">//    else</span><br><span class="hljs-comment">//        return n * fac(n - 1);</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//迭代的方式-非递归</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>;i &lt;= n;i++)<br>    &#123;<br>        ret = ret * i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">fac</span>(n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret = %d&quot;</span>, ret);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.求第n个斐波那契数(不考虑溢出)<br>斐波那契数列：1 1 2 3 5 8 13 21 34 55…(后一个数等于前两个数的和)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//递归</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">Fib</span>(n - <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">Fib</span>(n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ret);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们发现<strong>有问题</strong>：</p><ul><li>在使用<code>fib</code>这个函数的时候如果我们要计算第50个斐波那契数字的时候会特别的耗费时间。</li><li>使用<code>fib</code>函数求10000的阶乘(不考虑结果的正确性)，程序会崩溃<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//迭代</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span>(n &gt;= <span class="hljs-number">3</span>)<br>    &#123;<br>        c = a + b;<br>        a = b;<br>        b = c;<br>        n--;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">Fib</span>(n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ret);<br><br>&#125;<br></code></pre></td></tr></table></figure>//汉诺塔问题<br>//青蛙跳台阶问</li></ul><h1 id="五、-数组"><a href="#五、-数组" class="headerlink" title="五、 数组"></a>五、 数组</h1><h2 id="5-1-一维数组的创建和初始化"><a href="#5-1-一维数组的创建和初始化" class="headerlink" title="5.1 一维数组的创建和初始化"></a>5.1 一维数组的创建和初始化</h2><h3 id="5-1-1-数组的创建"><a href="#5-1-1-数组的创建" class="headerlink" title="5.1.1 数组的创建"></a>5.1.1 数组的创建</h3><p>数组是一组相同类型的集合。<br>数组的创建方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">type_t</span>  arr_name    [const_n]<br><span class="hljs-comment">//type_t  是指数组的元素类型</span><br><span class="hljs-comment">//const_n 是一个常量表达式，用于指定数组的大小</span><br></code></pre></td></tr></table></figure><p>数组创建的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>];<br><br><span class="hljs-type">char</span> ch[<span class="hljs-number">5</span>];<br><br><span class="hljs-type">double</span> data1[<span class="hljs-number">20</span>];<br><br><span class="hljs-type">double</span> data2[<span class="hljs-number">15</span> + <span class="hljs-number">5</span>];<br><br><br><span class="hljs-comment">//下面的代码只能在支持C99的编译器下运行</span><br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-type">int</span> arr2[n];    <span class="hljs-comment">//这种数组是不能初始化的</span><br><span class="hljs-comment">//在C99标准之前，数组的大小必须是常量或者常量表达式；在C99之后，数组的大小可以是变量，为了支持变长数组</span><br></code></pre></td></tr></table></figure><h3 id="5-1-2-数组的初始化"><a href="#5-1-2-数组的初始化" class="headerlink" title="5.1.2 数组的初始化"></a>5.1.2 数组的初始化</h3><p>数组的初始化是指：在创建数组的同时给数组的内容一些合理初始值(初始化)。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> arr1[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br>    <span class="hljs-built_in">int</span> arr2[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">int</span> arr3[]   = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;; <br><br>    <span class="hljs-built_in">char</span> ch1[<span class="hljs-number">10</span>] = &#123; <span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br>    <span class="hljs-built_in">char</span> ch2[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-built_in">char</span> ch3[]   = &#123; <span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br>    <span class="hljs-built_in">char</span> ch4[]   = <span class="hljs-string">&quot;abc&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/02/06/pEeHECj.png"></p><blockquote><p>在<code>arr1</code>中，<code>arr1</code>被不完全初始化，内存已经被开辟10个空间，但剩下的空间没被分&gt;配，自动补充为<code>0</code> 。<br>在<code>arr3</code>中，<code>arr3</code>未被初始化大小，读取内容为三个数字后自动分配3个空间。<br>在<code>ch1</code>和<code>ch2</code>中，<code>ch1</code>和<code>ch2</code>被不完全初始化，内存已经被开辟10个空间，但剩下的空间没被分配，自动补充为<code>\0</code> 。<br>在<code>ch3</code>中，<code>ch3</code>未被初始化大小，读取内容为三个字母后自动分配3个空间。<br>在<code>ch4</code>中，<code>ch4</code>未被初始化大小，读取内容为字符串后自动分配<code>字符串长度</code>+一个<code>\0</code>的4个内存空间。</p></blockquote><h3 id="5-1-3-一维数组的使用"><a href="#5-1-3-一维数组的使用" class="headerlink" title="5.1.3 一维数组的使用"></a>5.1.3 一维数组的使用</h3><p>对于数组的使用我们之前介绍了一个操作符：<code>[]</code>，下标引用操作符。它其实就是数组访问的操作符。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br>    <span class="hljs-built_in">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; sz;i++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>数组是使用下标访问的，下标是从0开始的。</li><li>数组的大小可以通过计算得到。</li></ol><h3 id="5-1-4-一维数组在内存中的存储"><a href="#5-1-4-一维数组在内存中的存储" class="headerlink" title="5.1.4 一维数组在内存中的存储"></a>5.1.4 一维数组在内存中的存储</h3><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">int main()<br>&#123;<br>    int arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;<br><br>    int sz = sizeof(arr) / sizeof(arr[0]);<br><br>    int i = 0;<br>    for (i = 0;i &lt; sz;i++)<br>    &#123;<br>        printf(&quot;&amp;arr[%d] = %p\n&quot;, i, &amp;arr[i]);<br>    &#125;<br><br>    return 0;<br>&#125;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">运行结果：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">0</span>] = 0000004A498FF698</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">1</span>] = 0000004A498FF69C</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">2</span>] = 0000004A498FF6A0</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">3</span>] = 0000004A498FF6A4</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">4</span>] = 0000004A498FF6A8</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">5</span>] = 0000004A498FF6AC</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">6</span>] = 0000004A498FF6B0</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">7</span>] = 0000004A498FF6B4</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">8</span>] = 0000004A498FF6B8</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&amp;arr[<span class="hljs-number">9</span>] = 0000004A498FF6BC</span><br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pEeHhdS"><img src="https://s21.ax1x.com/2025/02/06/pEeHhdS.png" alt="pEeHhdS.png"></a><br><strong>数组在内存中是连续存放的，且从低地址向高地址存放。</strong></p><h2 id="5-2-二维数组的创建和初始化"><a href="#5-2-二维数组的创建和初始化" class="headerlink" title="5.2 二维数组的创建和初始化"></a>5.2 二维数组的创建和初始化</h2><h3 id="5-2-1-二维数组的创建"><a href="#5-2-1-二维数组的创建" class="headerlink" title="5.2.1 二维数组的创建"></a>5.2.1 二维数组的创建</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">int arr<span class="hljs-selector-attr">[3]</span><span class="hljs-selector-attr">[4]</span>;<br>char arr<span class="hljs-selector-attr">[3]</span><span class="hljs-selector-attr">[5]</span>;<br>double arr<span class="hljs-selector-attr">[2]</span><span class="hljs-selector-attr">[4]</span>;<br></code></pre></td></tr></table></figure><h3 id="5-2-2-二维数组的初始化"><a href="#5-2-2-二维数组的初始化" class="headerlink" title="5.2.2 二维数组的初始化"></a>5.2.2 二维数组的初始化</h3><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">//我需要在arr1中存储以下数据</span><br><span class="language-xml">//1 2 3 4</span><br><span class="language-xml">//2 3 4 5</span><br><span class="language-xml">//3 4 5 6</span><br><span class="language-xml">int main()</span><br><span class="language-xml">&#123;</span><br><span class="language-xml">    int arr1[3][4] = &#123; 1,2,3,4,2,3,4,5,3,4,5,6 &#125;;</span><br><span class="language-xml">    int arr2[4][4] = &#123; 1,2,3,4,2,2,3&#125;;</span><br><span class="language-xml">    int arr3[3][4] = </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;</span><span class="language-xml">;</span><br><span class="language-xml"></span><br><span class="language-xml">    int arr4[][4] = </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;</span><span class="language-xml">;</span><br><span class="language-xml"></span><br><span class="language-xml">    return 0;</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/02/07/pEmk8v6.png"></p><blockquote><p>在<code>arr1</code>中，数组被完全初始化。<br>在<code>arr2</code>中，数组被不完全初始化，没被初始化的部分自动补充为<code>0</code>。<br>在<code>arr3</code>中，数组后的<code>&#123;&#125;</code>内的<code>&#123;&#125;</code>，分别定义了每一行的元素。<br>在<code>arr4</code>中，数组虽然没有具体定义多少行，但会自动匹配后面的数组的行数。</p></blockquote><p><strong>二维数组可以不定义行数，但一定要定义列数。</strong></p><h3 id="5-2-3-二维数组的使用"><a href="#5-2-3-二维数组的使用" class="headerlink" title="5.2.3 二维数组的使用"></a>5.2.3 二维数组的使用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">4</span>;j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br>&gt; <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br>&gt; <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="5-2-4-二维数组在内存中的存储"><a href="#5-2-4-二维数组在内存中的存储" class="headerlink" title="5.2.4 二维数组在内存中的存储"></a>5.2.4 二维数组在内存中的存储</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int main()<br>&#123;<br>    int arr<span class="hljs-comment">[3]</span><span class="hljs-comment">[4]</span> = &#123; 1,2,3,4,2,3,4,5,3,4,5,6 &#125;;<br>    int i = 0;<br>    for (i = 0;i &lt; 3;i++)<br>    &#123;<br>        int j = 0;<br>        for (j = 0;j &lt; 4;j++)<br>        &#123;<br>            printf(<span class="hljs-string">&quot;&amp;arr<span class="hljs-subst">[%d]</span><span class="hljs-subst">[%d]</span> = %p\n&quot;</span>,i,j,&amp;arr<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>);<br>        &#125;<br>    &#125;<br><br>    return 0;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; &amp;arr<span class="hljs-comment">[0]</span><span class="hljs-comment">[0]</span> = 0000008285EFF688<br>&gt; &amp;arr<span class="hljs-comment">[0]</span><span class="hljs-comment">[1]</span> = 0000008285EFF68C<br>&gt; &amp;arr<span class="hljs-comment">[0]</span><span class="hljs-comment">[2]</span> = 0000008285EFF690<br>&gt; &amp;arr<span class="hljs-comment">[0]</span><span class="hljs-comment">[3]</span> = 0000008285EFF694<br>&gt; &amp;arr<span class="hljs-comment">[1]</span><span class="hljs-comment">[0]</span> = 0000008285EFF698<br>&gt; &amp;arr<span class="hljs-comment">[1]</span><span class="hljs-comment">[1]</span> = 0000008285EFF69C<br>&gt; &amp;arr<span class="hljs-comment">[1]</span><span class="hljs-comment">[2]</span> = 0000008285EFF6A0<br>&gt; &amp;arr<span class="hljs-comment">[1]</span><span class="hljs-comment">[3]</span> = 0000008285EFF6A4<br>&gt; &amp;arr<span class="hljs-comment">[2]</span><span class="hljs-comment">[0]</span> = 0000008285EFF6A8<br>&gt; &amp;arr<span class="hljs-comment">[2]</span><span class="hljs-comment">[1]</span> = 0000008285EFF6AC<br>&gt; &amp;arr<span class="hljs-comment">[2]</span><span class="hljs-comment">[2]</span> = 0000008285EFF6B0<br>&gt; &amp;arr<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span> = 0000008285EFF6B4<br></code></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/02/07/pEmESYj.png"><br><strong>二维数组在内存中也是连续的。</strong></p><h2 id="5-3-数组越界"><a href="#5-3-数组越界" class="headerlink" title="5.3 数组越界"></a>5.3 数组越界</h2><ul><li>数组的下标是有范围限制的。</li><li>数组的下标规定是从0开始的，如果数组有n个元素，最后一个元素的下标就是n-1。</li><li>所以数组的下标如果小于0，或者大于n-1，就是数组越界访问了，超出了数组合法空间的访问。</li><li>C语言本身是不做数组下标的越界检查，编译器也不一定报错，但是编译器不报错，并不意味着程序就是正确的。</li></ul><h2 id="5-4-数组作为函数参数"><a href="#5-4-数组作为函数参数" class="headerlink" title="5.4 数组作为函数参数"></a>5.4 数组作为函数参数</h2><h3 id="5-4-1-冒泡排序的错误设计"><a href="#5-4-1-冒泡排序的错误设计" class="headerlink" title="5.4.1 冒泡排序的错误设计"></a>5.4.1 冒泡排序的错误设计</h3><p><img src="https://s21.ax1x.com/2025/02/07/pEmmmb6.png"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> arr[]</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; sz - <span class="hljs-number">1</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>;j &lt; sz - <span class="hljs-number">1</span> - i;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-built_in">int</span> temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> arr[] = &#123; <span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    bubble_sort(arr);<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; sz;i++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br><strong>数组名作为函数传参给函数，实际上传过去的是数组首地址。</strong><br><img src="https://s21.ax1x.com/2025/02/07/pEmmCUU.png"></p><h3 id="5-4-2-冒泡排序的正确设计"><a href="#5-4-2-冒泡排序的正确设计" class="headerlink" title="5.4.2 冒泡排序的正确设计"></a>5.4.2 冒泡排序的正确设计</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> arr[],<span class="hljs-built_in">int</span> sz</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; sz - <span class="hljs-number">1</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>;j &lt; sz - <span class="hljs-number">1</span> - i;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-built_in">int</span> temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> arr[] = &#123; <span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    bubble_sort(arr,sz);<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; sz;i++)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="5-5-数组名"><a href="#5-5-数组名" class="headerlink" title="5.5 数组名"></a>5.5 数组名</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,arr);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,&amp;arr[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">int</span> n = sizeof(arr);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,n);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 004FF7AC<br>&gt; 004FF7AC<br>&gt; <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,arr);<span class="hljs-regexp">//</span>首元素的地址<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,arr + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;-----------------\n&quot;</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,&amp;arr[<span class="hljs-number">0</span>]);<span class="hljs-regexp">//</span>首元素的地址<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,&amp;arr[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;-----------------\n&quot;</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,&amp;arr);<span class="hljs-regexp">//</span>数组的地址<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,&amp;arr + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; 00EFFB40<br>&gt; 00EFFB44<br>&gt; -----------------<br>&gt; 00EFFB40<br>&gt; 00EFFB44<br>&gt; -----------------<br>&gt; 00EFFB40<br>&gt; 00EFFB68<br></code></pre></td></tr></table></figure><p>数组名确实能表示首元素的地址。<br>但是有两种<strong>例外</strong>：</p><ol><li>sizeof(数组名)——这里表示整个数组，计算的是整个数组的大小，单位是字节</li><li>&amp;数组名，这里表示整个数组，取出的是整个数组的地址，如在上一个代码中，<code>&amp;arr = 00EFFB40</code>,<code>&amp;arr + 1 = 00EFFB68</code>,之间相差0x28,转换为十进制就是40,正好是数组的长度</li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">int</span> sz = sizeof(arr);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,sz);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;-----------------\n&quot;</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,arr);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%p</span>\n&quot;</span>,arr + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;-----------------\n&quot;</span>);<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;行数 = <span class="hljs-variable">%d</span>\n&quot;</span>,sizeof(arr)/sizeof(arr[<span class="hljs-number">0</span>]));  <br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;列数 = <span class="hljs-variable">%d</span>\n&quot;</span>,sizeof(arr[<span class="hljs-number">0</span>])/sizeof(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&gt; 运行结果：<br>&gt; <span class="hljs-number">48</span><br>&gt; -----------------<br>&gt; 00BFFC54<br>&gt; 00BFFC64<br>&gt; -----------------<br>&gt; 行数 = <span class="hljs-number">3</span><br>&gt; 列数 = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><ul><li>二维数组的数组名表示的也是二维数组的首地址，但是表示的并不是元素<code>arr[0][0]</code>的首地址，而是arr[0][x]这一行的地址</li><li>二维数组<code>arr + 1</code>表示的是<code>arr[1][x]</code>的地址，在上述代码中二维数组<code>arr = 00BFFC54</code>和<code>arr + 1 = 00BFFC64</code>差0x10,在十进制中为16，正好对应的是一行的列数的长度<h3 id="5-5-1-三子棋"><a href="#5-5-1-三子棋" class="headerlink" title="5.5.1 三子棋"></a>5.5.1 三子棋</h3>程序设计思路：<br>需要一个主函数包含三子棋的运行逻辑，并用作测试的<code>test.c</code><br>如果所有游戏运行逻辑全写在主函数会比较冗余，主函数内只调用函数，具体的函数实现写在<code>game.c</code><br>各种头文件及函数的声明放在<code>game.h</code></li></ul><p>game.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 3</span><br><br><span class="hljs-comment">//初始化棋盘</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBorad</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//打印棋盘</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//玩家下棋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PlayerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//电脑下棋</span><br><span class="hljs-comment">//找有空的位置随机下棋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ComputerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br><br><span class="hljs-comment">//判断输赢</span><br><span class="hljs-comment">//玩家赢 - &#x27;*&#x27;</span><br><span class="hljs-comment">//电脑赢 - &#x27;#&#x27;</span><br><span class="hljs-comment">//平局   - &#x27;Q&#x27;</span><br><span class="hljs-comment">//继续   - &#x27;C&#x27;</span><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">IsWin</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span>;<br></code></pre></td></tr></table></figure><p>game.c</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include <span class="hljs-string">&quot;game.h&quot;</span><br><br>//判断棋盘是否满了，满了返回<span class="hljs-number">1</span>，不满返回<span class="hljs-number">0</span><br>int <span class="hljs-symbol">Isfull</span>(char board[<span class="hljs-symbol">ROW</span>][<span class="hljs-symbol">COL</span>],int row,int col)<br>&#123;<br>int i = <span class="hljs-number">0</span>;<br>int j = <span class="hljs-number">0</span>;<br>for (i = <span class="hljs-number">0</span>;i &lt; row;i++)<br>&#123;<br>for (j = <span class="hljs-number">0</span>;j &lt; col;j++)<br>&#123;<br>if (board[i][j] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>return <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br>return <span class="hljs-number">1</span>;<br>&#125;<br><br><br>void <span class="hljs-symbol">InitBorad</span>(char board[<span class="hljs-symbol">ROW</span>][<span class="hljs-symbol">COL</span>], int row, int col)<br>&#123;<br>int i = <span class="hljs-number">0</span>;<br>int j = <span class="hljs-number">0</span>;<br>for (i = <span class="hljs-number">0</span>;i &lt; row;i++)<br>&#123;<br>for (j = <span class="hljs-number">0</span>;j &lt; col;j++)<br>&#123;<br>board[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>&#125;<br>&#125;<br><br>void <span class="hljs-symbol">DisplayBoard</span>(char board[<span class="hljs-symbol">ROW</span>][<span class="hljs-symbol">COL</span>], int row, int col)<br>&#123;<br>//打印数据<br>int i = <span class="hljs-number">0</span>;<br>for (i = <span class="hljs-number">0</span>;i &lt; row;i++)<br>&#123;<br>int j = <span class="hljs-number">0</span>;<br>for (j = <span class="hljs-number">0</span>;j &lt; col;j++)<br>&#123;<br>printf(<span class="hljs-string">&quot; %c &quot;</span>, board[i][j]);<br>if (j &lt; col - <span class="hljs-number">1</span>)<br>printf(<span class="hljs-string">&quot;|&quot;</span>);<br>&#125;<br>printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>//打印分割行信息<br>if (i &lt; row - <span class="hljs-number">1</span>)<br>&#123;<br>int k = <span class="hljs-number">0</span>;<br>for (k = <span class="hljs-number">0</span>;k &lt; col;k++)<br>&#123;<br>printf(<span class="hljs-string">&quot;---&quot;</span>);<br>if (k &lt; col - <span class="hljs-number">1</span>)<br>printf(<span class="hljs-string">&quot;|&quot;</span>);<br>&#125;<br>printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br>&#125;<br>&#125;<br><br>void <span class="hljs-symbol">PlayerMove</span>(char board[<span class="hljs-symbol">ROW</span>][<span class="hljs-symbol">COL</span>], int row, int col)<br>&#123;<br>int x = <span class="hljs-number">0</span>;<br>int y = <span class="hljs-number">0</span>;<br><br>printf(<span class="hljs-string">&quot;玩家下棋\n&quot;</span>);<br><br>while (<span class="hljs-number">1</span>)<br>&#123;<br>printf(<span class="hljs-string">&quot;请输入坐标:&quot;</span>);<br>scanf(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>if (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)<br>&#123;<br>if (board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>break;<br>&#125;<br>else<br>&#123;<br>printf(<span class="hljs-string">&quot;该地已有棋子，请换其他地方下棋&quot;</span>);<br>&#125;<br>&#125;<br>else<br>&#123;<br>printf(<span class="hljs-string">&quot;坐标非法，请重新输入\n&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br><br>void <span class="hljs-symbol">ComputerMove</span>(char board[<span class="hljs-symbol">ROW</span>][<span class="hljs-symbol">COL</span>], int row, int col)<br>&#123;<br>printf(<span class="hljs-string">&quot;电脑下棋：\n&quot;</span>);<br>int x = <span class="hljs-number">0</span>;<br>int y = <span class="hljs-number">0</span>;<br><br>while (<span class="hljs-number">1</span>)<br>&#123;<br>x = rand() <span class="hljs-comment">% row;//0~2</span><br>y = rand() <span class="hljs-comment">% col;//0~2</span><br>if (board[x][y] == <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>board[x][y] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>break;<br>&#125;<br>&#125;<br><br>&#125;<br><br>char <span class="hljs-symbol">IsWin</span>(char board[<span class="hljs-symbol">ROW</span>][<span class="hljs-symbol">COL</span>], int row, int col)<br>&#123;<br>//行<br>int i = <span class="hljs-number">0</span>;<br>for (i = <span class="hljs-number">0</span>;i &lt; row;i++)<br>&#123;<br>if (board[i][<span class="hljs-number">0</span>] == board[i][<span class="hljs-number">1</span>] &amp;&amp; board[i][<span class="hljs-number">1</span>] == board[i][<span class="hljs-number">2</span>] &amp;&amp; board[i][<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>return board[i][<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><br>//列<br>int j = <span class="hljs-number">0</span>;<br>for (j = <span class="hljs-number">0</span>;j &lt; col;j++)<br>&#123;<br>if (board[<span class="hljs-number">0</span>][j] == board[<span class="hljs-number">1</span>][j] &amp;&amp; board[<span class="hljs-number">1</span>][j] == board[<span class="hljs-number">2</span>][j] &amp;&amp; board[<span class="hljs-number">1</span>][j] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>return board[<span class="hljs-number">1</span>][j];<br>&#125;<br>&#125;<br><br>//对角线<br>if (board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>return board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>&#125;<br><br>if (board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br>return board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>&#125;<br><br>//没有人赢，判断是否平局<br>if (<span class="hljs-symbol">Isfull</span>(board, row, col))<br>&#123;<br>return <span class="hljs-string">&#x27;Q&#x27;</span>;<br>&#125;<br><br>//游戏继续<br>return <span class="hljs-string">&#x27;C&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>test.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****  1. PLAY  *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****  0. EXIT  *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********************\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">game</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> board[ROW][COL] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">//初始化数组</span><br><span class="hljs-built_in">InitBorad</span>(board,ROW,COL);<br><span class="hljs-built_in">DisplayBoard</span>(board, ROW, COL);<br><span class="hljs-comment">//下棋</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">PlayerMove</span>(board, ROW, COL);<br>ret = <span class="hljs-built_in">IsWin</span>(board, ROW, COL);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">DisplayBoard</span>(board, ROW, COL);<br><br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1500</span>);<br><br><span class="hljs-built_in">ComputerMove</span>(board, ROW, COL);<br>ret = <span class="hljs-built_in">IsWin</span>(board, ROW, COL);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">DisplayBoard</span>(board, ROW, COL);<br>&#125;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;*&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;玩家赢了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;#&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;电脑赢了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;平局\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">DisplayBoard</span>(board, ROW, COL);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-built_in">menu</span>();<span class="hljs-comment">//打印菜单</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">switch</span> (input)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">game</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择错误，请重新选择\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (input);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>嵌入式学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C51单片机学习</title>
    <link href="/2024/10/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f3901db122ff47b24c980e2ff2092a868bb7e08b6d627e7204c1068b7a2880cd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码...</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>嵌入式学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown学习</title>
    <link href="/2024/10/19/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/markdown%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/19/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/markdown%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>耗时两天遇到各种各样的问题，终于搭建好了个人博客，遇到的第一个问题就是如何写博客，此文章便应运而生。</p><span id="more"></span><br/><br/><center><font face="微软雅黑" color=blue> markdown学习</font></center><center><font face="微软雅黑" color=pink size=4> author：凛竹九歌（LynBambAria）</font></center><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>#一级标题<br>##二级标题<br>###三级标题<br>……<br>######六级标题（最多支持六个）  </p><h2 id="二、引用"><a href="#二、引用" class="headerlink" title="二、引用"></a>二、引用</h2><p>使用方法 &gt; +内容<br>如果在第二行 &gt;&gt; 就会嵌套</p><blockquote><p>这就叫引用</p><blockquote><p>甚至可以二层嵌套</p><blockquote><p>那应该也可以三层  </p></blockquote></blockquote></blockquote><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><ol><li>无序列表</li></ol><ul><li>列表1（- 列表1）<ul><li>列表2（+ 列表2）</li><li>列表2的分身<ul><li>列表3（* 列表3）  </li></ul></li></ul></li></ul><blockquote><p>说明-、+、*（空格）都可以用来表示列表<br> 偶然发现如果列表如果没有对其不在同一行会在实心和空心之间变换欸  </p></blockquote><ol><li><p>有序列表<br>数字+.+空格+内容  </p></li><li><p>嵌套</p><ol><li>这 </li><li>就 </li><li>是</li><li>嵌</li><li>套<blockquote><p>值得一提的是如果要实现嵌套需要（痛击空格4次）+数字+.+（空格）+内容  </p></blockquote></li></ol></li><li><p>TodoList(我觉得应该叫勾选框是不是更合适)<br>使用方法- [ ] 输入选项（[ ]一定要有一个空格，否则就变成列表了</p><ul><li><input checked="" disabled="" type="checkbox"> a </li><li><input disabled="" type="checkbox"> b</li><li><input disabled="" type="checkbox"> c  </li></ul></li></ol><h2 id="四、表格"><a href="#四、表格" class="headerlink" title="四、表格"></a>四、表格</h2><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">a</td><td align="center">b</td><td align="right">c</td></tr><tr><td align="left"></td><td align="center"></td><td align="right"></td></tr></tbody></table><pre><code class="hljs">| 左对齐 | 居中对齐 | 右对齐 |    | :---- | :----: | ----: |    | a | b | c |    </code></pre><h2 id="五、段落"><a href="#五、段落" class="headerlink" title="五、段落"></a>五、段落</h2><ul><li>换行：此行结束两个以上的空格后回车/空一行</li><li>分割线：三个（及其以上）个***……</li></ul><hr><ul><li>字体<table><thead><tr><th align="center">字体</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center"><em>斜体</em></td><td align="center">* 内容 *</td></tr><tr><td align="center">==高亮==</td><td align="center">== 内容 ==</td></tr><tr><td align="center"><strong>粗体</strong></td><td align="center">** 粗体 **</td></tr><tr><td align="center"><strong><em>斜粗体</em></strong></td><td align="center"><strong>*  *</strong></td></tr><tr><td align="center"><del>删除</del></td><td align="center">~~ 内容 ~~</td></tr><tr><td align="center"><u>下划线</u></td><td align="center"><code>&lt;u&gt;&lt;/u&gt;</code></td></tr></tbody></table></li><li>脚注（我觉得叫引用是不是更好一点）<br>你看看这是不是和引用参考文献差不多<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="```使用方法就是在引用的地方[^x], 然后再后面单独一行再``````[^x]:输入引用内容即可```">[1]</span></a></sup></li></ul><h2 id="六、代码"><a href="#六、代码" class="headerlink" title="六、代码"></a>六、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这叫代码段，使用方法：在代码开头三个英文一撇，结束位置再加三个<br><code>printf(&quot;hello world&quot;);</code><br>有了代码段肯定也有代码行，与代码段类似，但是区别是只需要一撇  </p><h2 id="七、超链接"><a href="#七、超链接" class="headerlink" title="七、超链接"></a>七、超链接</h2><p>[其实直接输入链接就行了]：<a href="http://www.baidu.com/">www.baidu.com</a><br>也可以这样<a href="lymbambaira.github.io">我的博客</a><br>这个使用方法是[链接名称]（网站）  </p><h2 id="八、图片"><a href="#八、图片" class="headerlink" title="八、图片"></a>八、图片</h2><p>图片的插入需要图床，免费图床链接：<a href="https://imgse.com/">https://imgse.com</a><br>上传图片后下面可以生成markdown地址，可以直接贴过来<br><img src="https://s21.ax1x.com/2024/10/20/pAaKhUH.png"><br>值得一提的是markdown只能直接贴图片，而html可以修改图片，比如图片位置，长宽等</p><h2 id="九、插入数学公式"><a href="#九、插入数学公式" class="headerlink" title="九、插入数学公式"></a>九、插入数学公式</h2><p>暂时用不到，先搁置一边罢（说了可以插入latex，不知道mathtpye行不行，有空研究一下）</p><h2 id="十、html-css语法"><a href="#十、html-css语法" class="headerlink" title="十、html/css语法"></a>十、html/css语法</h2><p>等同于html和css语法，看来空闲时间也可以学习一下了<br>最明显的用途就是美化博客界面</p><h2 id="十一、导出为PDF"><a href="#十一、导出为PDF" class="headerlink" title="十一、导出为PDF"></a>十一、导出为PDF</h2><p>右键preview，open in brower,右键打印为PDF<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><code>使用方法就是在引用的地方[^x], 然后再后面单独一行再</code>  <code>[^x]:输入引用内容即可</code><br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>博客教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/18/hello-world/"/>
    <url>/2024/10/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
